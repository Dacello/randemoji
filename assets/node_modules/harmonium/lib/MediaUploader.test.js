'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _MediaUploader = require('./MediaUploader');

var _MediaUploader2 = _interopRequireDefault(_MediaUploader);

var _utils = require('./MediaUploader/utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('MediaUploader', function () {
  it('can render with no config', function () {
    expect(function () {
      return shallow(_react2.default.createElement(_MediaUploader2.default, null));
    }).not.to.throw();
  });

  it('updates the preview image when the state changes', function () {
    var wrapper = mount(_react2.default.createElement(_MediaUploader2.default, { defaultPreview: 'path/to/image.jpg' }));

    expect(wrapper.find('img[src="path/to/image.jpg"]').length).to.equal(1);

    wrapper.setState({ imagePreviewUrl: 'anotherimage.jpg' });

    expect(wrapper.find('img[src="anotherimage.jpg"]').length).to.equal(1);
  });

  it('can preview a video file', function () {
    var wrapper = mount(_react2.default.createElement(_MediaUploader2.default, null));

    wrapper.setState({
      imagePreviewUrl: 'another.mp4',
      file: { type: 'video/mp4' }
    });
    expect(wrapper.find('video[src="another.mp4"]').length).to.equal(1);
  });

  it('adjusts appropriately when in presigned URL mode', function () {
    var wrapper = mount(_react2.default.createElement(_MediaUploader2.default, {
      getS3Info: function getS3Info() {
        return {
          url: '/fake/path',
          signed_request: 'another/fake/path'
        };
      },
      name: 'image',
      required: true
    }));

    expect(wrapper.find('input[type="file"][name=""][required=false]').length).to.equal(1);
    expect(wrapper.find('input[type="hidden"][name="image"][required]').length).to.equal(1);
  });

  it('adjusts appropriately when file is invalid', function () {
    var wrapper = mount(_react2.default.createElement(_MediaUploader2.default, {
      getS3Info: function getS3Info() {
        return {
          url: '/fake/path',
          signed_request: 'another/fake/path'
        };
      },
      defaultPreview: 'fake.jpg'
    }));

    expect(wrapper.find('input[type="hidden"][value="fake.jpg"]').length).to.equal(1);

    wrapper.setState({
      valid: false
    });

    expect(wrapper.find('input[type="hidden"][value=""]').length).to.equal(1);
  });

  it('can check if a file is a video file', function () {
    expect(_utils2.default.isVideoFile({ type: '' })).to.equal(false);

    var file = { type: 'video/mp4' };

    expect(_utils2.default.isVideoFile(file)).to.equal(true);
  });

  it('can check if a file is too big', function () {
    var file = { size: 10000000 };

    expect(_utils2.default.isTooBig(file, 10)).to.equal(false);
    expect(_utils2.default.isTooBig(file, 1)).to.equal(true);
  });

  it('can check if a file is of an unsupported type', function () {
    var file = { type: 'image/png' };

    expect(_utils2.default.isUnsupportedFileType(file, ['image/png'])).to.equal(false);
    expect(_utils2.default.isUnsupportedFileType(file, ['image/jpg'])).to.equal(true);
  });
}); /* eslint-disable camelcase */
//# sourceMappingURL=MediaUploader.test.js.map