{"version":3,"sources":["../src/DatePicker.js"],"names":["goodDateInput","window","element","document","createElement","setAttribute","type","isFirefox","test","navigator","userAgent","UncontrolledDatePicker","isSelectable","props","dateFormat","state","isOpen","focused","valuesFromProps","generation","mousedIn","nextProps","setState","valuesFromIso","defaultValue","value","iso","isoValue","formattedValue","isoToFormatted","DateTime","fromISO","toFormat","event","asISO","fromFormat","target","toISODate","onChange","date","nativeInputValueSetter","Object","getOwnPropertyDescriptor","HTMLInputElement","prototype","set","call","nativeInput","fireChangeHandler","refocus","Event","bubbles","cancelable","dispatchEvent","onFocus","onBlur","focus","ref","calendar","contains","preventDefault","blur","mouseOut","error","help","label","highlights","overrides","week","day","headerDay","overlay","showYearSelection","createElementWithOverride","bind","nativeClass","useNativePicker","inputId","dateInputBlockProps","mouseIn","self","input","onOutsideClick","dateChanger","calendarOpened","getCalendarRef","disabled","useCalendarOnMobile","React","Component","propTypes","PropTypes","node","oneOfType","arrayOf","string","objectOf","func","bool","instanceOf","object","DateInputBlock","Calendar"],"mappings":"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","file":"DatePicker.js","sourcesContent":["/** @jsx createElement */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {uniqueId, omit} from 'lodash'\nimport Calendar from './DatePicker/Calendar'\nimport DateInputBlock from './DatePicker/DateInputBlock'\nimport InputHelpText from './InputHelpText'\nimport InputErrors from './InputErrors'\nimport createElementWithOverride from './Utilities/createElementWithOverride'\nimport {DateTime} from 'luxon'\n\n/**\n * Return true if date type inputs are well supported on this platform\n * @return {boolean} true is date type inputs are well supported, false otherwise\n */\nfunction goodDateInput() {\n  if (typeof window === 'undefined') {\n    return true\n  } else {\n    const element = document.createElement('input')\n\n    element.setAttribute('type', 'date')\n    return element.type === 'date'\n  }\n}\n\n/**\n * Return true if Firefox browser\n * Date type inputs are supported on Firefox but not possible to\n * prevent the native calendar popup dialog, resulting in two calendars\n * showing. Need to default to type text input.\n * @return {boolean} true is date type inputs are well supported, false otherwise\n */\n\nconst isFirefox = () => {\n  return /Firefox/i.test(navigator.userAgent)\n}\n\n/** A DatePicker component containing inputs and a calendar. */\nclass UncontrolledDatePicker extends React.Component {\n  /**\n   * The default values for props of this component\n   * @return {object} the default value object\n   */\n  static get defaultProps() {\n    return {\n      isSelectable: () => true,\n    }\n  }\n\n  /**\n   * Create a datepicker. Determines if we can use browser native date type input\n   * or if we need to fall back to a text type input (based on support and if a\n   * non-standard format is specified.)\n   * @param {object} props - the props\n   */\n  /* eslint complexity: [2, 4] */\n  constructor(props) {\n    super(props)\n    // On platforms with poor date input support, or when non-standard format is\n    // specified, we have to fall back to a text type input\n    this.goodDateInput =\n      goodDateInput() && !this.props.dateFormat && !isFirefox()\n    this.state = {\n      isOpen: this.props.isOpen || false,\n      focused: false,\n      // Handles setting both the iso and 'local' format versions of the date\n      // into state. We do this so that we can always accept ISO dates from\n      // up the hierarchy, but also handle accepting change events from unchecked\n      // oddly formatted text inputs\n      ...this.valuesFromProps(props),\n      // Generation exists to force the inputs in the component to accept the\n      // new value when we click the calendar\n      generation: 0,\n      mousedIn: false,\n    }\n  }\n\n  /**\n   * Handle updated props from up the chain. In particular, if we receive a new\n   * date from up the hierarchy, we want to reset the inputs and the calendar to\n   * that value.\n   * @param {object} nextProps - the next props\n   * @return {void}\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState(this.valuesFromProps(nextProps))\n  }\n\n  /**\n   * Find the date value from the props, and convert it to two values-- an iso\n   * date and a 'local' format date version (so we can deal with poorly formatted\n   * text inputs intelligently).\n   * @param {object} props - the props\n   * @return {object} an object with two keys: isoValue & formattedValue\n   */\n  valuesFromProps(props) {\n    return this.valuesFromIso(props.defaultValue || props.value)\n  }\n\n  /**\n   * Take an ISO formatted date and turn it into an object with iso and local\n   * format date.\n   * @param {string} iso - an iso format date\n   * @return {object} an object with two keys: isoValue & formattedValue\n   */\n  valuesFromIso(iso) {\n    return {\n      isoValue: iso,\n      formattedValue: this.isoToFormatted(iso),\n    }\n  }\n\n  /**\n   * Take an iso formatted date and put it into this picker's format\n   * @param {string} iso - an iso format date\n   * @return {string} a date formatted according to the format of this date picker\n   */\n  isoToFormatted(iso) {\n    if (!iso) {\n      return ''\n    }\n    return DateTime.fromISO(iso).toFormat(this.dateFormat)\n  }\n\n  /**\n   * Process change events from the input by updating the isoValue & formattedValue\n   * of this component. Will call down to an onChange handler passed in.\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @return {void}\n   */\n  onChange(event) {\n    // Take whatever format the input gave us, and turn it into an ISO date string\n    const asISO = DateTime.fromFormat(\n      event.target.value,\n      this.dateFormat\n    ).toISODate()\n\n    if (this.props.onChange) {\n      // Call into an onChange we got as props\n      this.props.onChange(event)\n    }\n\n    // Update isoValue & formattedValue from the ISO we built\n    this.setState(this.valuesFromIso(asISO))\n  }\n\n  /**\n   * Return the date format the component is using. Will be yyyy-MM-dd if we are\n   * using a well supported date input (without custom format). If we have fallen\n   * back to text field due to custom format or bad support, this will be the\n   * custom format (defaulting to 'MM/dd/yyyy').\n   * @return {string} the date format in use by the component\n   */\n  get dateFormat() {\n    // TODO: detect locale default format string and use that instead of\n    //   hardcoded 'MM/dd/yyyy'\n    return this.goodDateInput\n      ? 'yyyy-MM-dd'\n      : this.props.dateFormat || 'MM/dd/yyyy'\n  }\n\n  /**\n   * Invoked by the calendar to tell the date picker to update the inputs (onClick\n   * of the calendar buttons).\n   * @param {string} date - the new date, in the format yyyy-MM-dd\n   * @return {void}\n   */\n  dateChanger(date) {\n    // Update isoValue & formattedValue based on the date value (which is an iso\n    // date)\n    this.setState(this.valuesFromIso(date), () => {\n      // Update the native input value with the formatted version of the new date\n      // (this prevents the native input value from sticking with a hand-typed\n      // input value after the button is clicked in certain situations)\n      // It also sets us up to fire off a synthetic change event that looks just\n      // like change event from a typed input (so external change handlers are\n      // properly) invoked\n      const nativeInputValueSetter = Object.getOwnPropertyDescriptor(\n        window.HTMLInputElement.prototype,\n        'value'\n      ).set\n\n      nativeInputValueSetter.call(this.nativeInput, this.isoToFormatted(date))\n\n      this.fireChangeHandler()\n\n      // Force the input to be focused again (so that we don't immediately close\n      // the calendar because the button click makes us not focused on the input)\n      this.refocus()\n    });\n  }\n\n  /**\n   * Create a synthetic change event and send it into the change handlers as if\n   * the user had typed the new value. This makes typed input and calendar button\n   * clicks fire off the same handlers.\n   * @return {void}\n   */\n  fireChangeHandler() {\n    const event = new Event('change', {bubbles: true, cancelable: false})\n\n    this.nativeInput.dispatchEvent(event)\n    this.onChange(event)\n  }\n\n  /**\n   * Test whether we're on android or iphone. In that case, we hide the calendar\n   * (unless we specify the useCalendarOnMobile prop to force it). This is because\n   * those platforms have native inputs for dates which are much better for touch\n   * than what we can do with a calendar.\n   * @return {boolean} - true if on iOS or Android\n   */\n  useNativePicker() {\n    return (\n      typeof navigator !== 'undefined' &&\n      /Android|iPhone|iPad|iPod/i.test(navigator.userAgent)\n    )\n  }\n\n  /**\n   * Track when the mouse cursor is over the component, so that we can not\n   * immediately close the calendar when we lose focus-- which happens if you\n   * click the calendar buttons.\n   * @return {void}\n   */\n  mouseIn() {\n    this.setState({mousedIn: true})\n  }\n\n  /**\n   * Track when the mouse is no longer over the component, which means that it\n   * is safe to close the calendar if we lose focus, for example, because the\n   * focus has moved to the next element.\n   * @return {void}\n   */\n  mouseOut() {\n    this.setState({mousedIn: false, isOpen: this.state.focused})\n  }\n\n  /**\n   * Mark the input as in focus. Used to determine whether the calendar should\n   * be open or not.\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @return {void}\n   *\n   */\n  focus(event) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event)\n    }\n    this.setState({focused: true, isOpen: true})\n  }\n\n  /**\n   * Mark the input as out of focus. Used to determine whether the calendar should\n   * be open or not.\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @return {void}\n   */\n  blur(event) {\n    if (this.props.onBlur) {\n      this.props.onBlur(event)\n    }\n    this.setState({focused: false, isOpen: this.state.mousedIn})\n  }\n\n  /**\n   * Force the input back into focus. Used when calendar buttons are clicked, so\n   * that the input stays in focus and we don't close the calendar.\n   * @return {void}\n   */\n  refocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus()\n    }\n    this.focus()\n  }\n\n  /**\n   * Returns true if the calendar should be opened, which is if:\n   * - isOpen prop or state is set to true (state is true if the input is in\n   *   focus or moused over)\n   * - AND the input is not disabled\n   * - AND we're not using the iOS / Android native picker (i.e. we're not on\n   *   those platform OR we used props.useCalendarOnMobile to force non-native\n   *   input)\n   * @returns {boolean} - true if the calendar should be open\n   */\n  /* eslint complexity: [2, 5] */\n  get calendarOpened() {\n    return (\n      (this.state.isOpen || this.props.isOpen) &&\n      !this.props.disabled &&\n      (!this.useNativePicker() || this.props.useCalendarOnMobile)\n    )\n  }\n\n  /**\n   * Get the underlying node for the Calendar component\n   * @param {Object} ref - the calendar node\n   * @return {void}\n   */\n  getCalendarRef(ref) {\n    this.calendar = ref\n  }\n\n  /**\n   * Allow Datepicker to close on outside click\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @return {void}\n   */\n  onOutsideClick(event) {\n    if (\n      this.state.isOpen &&\n      this.calendar &&\n      !this.calendar.contains(event.target)\n    ) {\n      event.preventDefault()\n      this.blur(event)\n      this.mouseOut()\n    }\n  }\n\n  render() {\n    const {\n      error,\n      help,\n      label,\n      highlights,\n      overrides,\n      isSelectable,\n      calendar,\n      week,\n      day,\n      headerDay,\n      overlay,\n      showYearSelection,\n      ...props\n    } = this.props\n    const createElement = createElementWithOverride.bind(this, overrides)\n    const nativeClass = this.useNativePicker()\n      ? 'rev-DatePicker--native'\n      : 'rev-DatePicker--custom'\n    const inputId = uniqueId('DateInputBlock:')\n    const dateInputBlockProps = omit(props, 'isOpen')\n\n    return (\n      <label\n        htmlFor={inputId}\n        className={`rev-DatePicker rev-InputLabel ${nativeClass}`}\n        onMouseOver={this.mouseIn.bind(this)}\n        onMouseOut={this.mouseOut.bind(this)}\n        onFocus={this.focus.bind(this)}\n        onBlur={this.blur.bind(this)}\n        ref={(self) => (this.label = self)}\n      >\n        {label}\n        <DateInputBlock\n          {...dateInputBlockProps}\n          id={inputId}\n          error={error}\n          isoValue={this.state.isoValue}\n          formattedValue={this.state.formattedValue}\n          goodDateInput={this.goodDateInput}\n          onFocus={this.focus.bind(this)}\n          onBlur={this.blur.bind(this)}\n          onChange={this.onChange.bind(this)}\n          generation={this.state.generation}\n          inputRef={(input) => (this.nativeInput = input)}\n          overrides={overrides}\n        />\n        <InputHelpText>{help}</InputHelpText>\n        <InputErrors>{error}</InputErrors>\n        <Calendar\n          onClick={this.onOutsideClick.bind(this)}\n          selectedDate={this.state.isoValue}\n          dateChanger={this.dateChanger.bind(this)}\n          focuser={this.refocus.bind(this)}\n          overrides={overrides}\n          isSelectable={isSelectable}\n          week={week}\n          highlights={highlights}\n          overlay={overlay}\n          {...calendar}\n          day={day}\n          headerDay={headerDay}\n          showYearSelection={showYearSelection}\n          className={\n            this.calendarOpened ? 'rev-Calendar--open' : 'rev-Calendar--closed'\n          }\n          getCalendarRef={this.getCalendarRef.bind(this)}\n        />\n      </label>\n    )\n  }\n}\n\nUncontrolledDatePicker.propTypes = {\n  error: PropTypes.node,\n  help: PropTypes.node,\n  label: PropTypes.node,\n  highlights: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.objectOf(PropTypes.string),\n    PropTypes.func,\n  ]),\n  isOpen: PropTypes.bool,\n  overrides: PropTypes.objectOf(\n    PropTypes.oneOfType([PropTypes.func, PropTypes.instanceOf(React.Component)])\n  ),\n  isSelectable: PropTypes.func,\n  calendar: PropTypes.object,\n  week: PropTypes.object,\n  day: PropTypes.object,\n  headerDay: PropTypes.object,\n  useCalendarOnMobile: PropTypes.bool,\n  showYearSelection: PropTypes.bool,\n}\n\nUncontrolledDatePicker.DateInputBlock = DateInputBlock\nUncontrolledDatePicker.Calendar = Calendar\nexport {Calendar, DateInputBlock}\nexport default UncontrolledDatePicker\n"]}