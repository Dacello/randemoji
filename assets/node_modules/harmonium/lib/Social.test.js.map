{"version":3,"sources":["../src/Social.test.js"],"names":["describe","it","Social","types","FACEBOOK","inherentClassName","testClassName","childClassName","first","prop","expect","to","contain","tweetLink","renderedLink","TWITTER","equal","PATTERNS","BUFFER","DIGG","EMAIL","GOOGLE_PLUS","LINKEDIN","PINTEREST","REDDIT","TUMBLR","service","Object","prototype","hasOwnProperty","call","social","find"],"mappings":";;AAAA;;;;AACA;;AACA;;;;;;AAEAA,SAAS,QAAT,EAAmB,YAAM;AACvBC,KAAG,gCAAH,EAAqC,YAAM;AACzC,yBAAQ,8BAAC,gBAAD,IAAQ,MAAMC,iBAAOC,KAAP,CAAaC,QAA3B,EAAqC,KAAI,oBAAzC,GAAR;AACD,GAFD;;AAIAH,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAMI,oBAAoB,QAA1B;AACA,QAAMC,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiB,qBACrB,8BAAC,gBAAD;AACE,iBAAWD,aADb;AAEE,YAAMJ,iBAAOC,KAAP,CAAaC,QAFrB;AAGE,WAAI;AAHN,MADqB,EAOpBI,KAPoB,GAQpBC,IARoB,CAQf,WARe,CAAvB;;AAUAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCP,iBAAlC;AACAK,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GAhBD;;AAkBAL,KAAG,8BAAH,EAAmC,YAAM;AACvC,QAAMY,YACJ,uFADF;;AAGA,QAAMC,eAAe,qBACnB,8BAAC,gBAAD,IAAQ,MAAMZ,iBAAOC,KAAP,CAAaY,OAA3B,EAAoC,KAAI,mBAAxC,GADmB,EAGlBP,KAHkB,GAIlBC,IAJkB,CAIb,MAJa,CAArB;;AAMAC,WAAOI,YAAP,EAAqBH,EAArB,CAAwBK,KAAxB,CAA8BH,SAA9B;AACD,GAXD;;AAaAZ,KAAG,uBAAH,EAA4B,YAAM;AAChC,QAAMgB,WAAW;AACfC,cAAQ,QADO;AAEfC,YAAM,MAFS;AAGfC,aAAO,QAHQ;AAIfhB,gBAAU,UAJK;AAKfiB,mBAAa,QALE;AAMfC,gBAAU,UANK;AAOfC,iBAAW,WAPI;AAQfC,cAAQ,QARO;AASfC,cAAQ,QATO;AAUfV,eAAS;AAVM,KAAjB;;AAaA,SAAK,IAAMW,OAAX,IAAsBxB,iBAAOC,KAA7B,EAAoC;AAClC,UAAIwB,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC5B,iBAAOC,KAA5C,EAAmDuB,OAAnD,CAAJ,EAAiE;AAC/D,YAAMK,SAAS,qBACb,8BAAC,gBAAD,IAAQ,MAAM7B,iBAAOC,KAAP,CAAauB,OAAb,CAAd,EAAqC,KAAI,oBAAzC,GADa,CAAf;;AAIAhB,eAAOqB,OAAOC,IAAP,CAAY,GAAZ,EAAiBvB,IAAjB,CAAsB,MAAtB,CAAP,EAAsCE,EAAtC,CAAyCC,OAAzC,CAAiDK,SAASS,OAAT,CAAjD;AACD;AACF;AACF,GAvBD;AAwBD,CA5DD","file":"Social.test.js","sourcesContent":["import React from 'react'\nimport {shallow} from 'enzyme'\nimport Social from './Social'\n\ndescribe('Social', () => {\n  it('should render without throwing', () => {\n    shallow(<Social type={Social.types.FACEBOOK} url=\"https://revelry.co\" />)\n  })\n\n  it('should add className to child', () => {\n    const inherentClassName = 'social'\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(\n      <Social\n        className={testClassName}\n        type={Social.types.FACEBOOK}\n        url=\"https://revelry.co\"\n      />\n    )\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(inherentClassName)\n    expect(childClassName).to.contain(testClassName)\n  })\n\n  it('should render the right link', () => {\n    const tweetLink =\n      'https://twitter.com/intent/tweet?url=http%3A%2F%2Frevelry.co&text=Check%20this%20out!'\n\n    const renderedLink = shallow(\n      <Social type={Social.types.TWITTER} url=\"http://revelry.co\" />\n    )\n      .first()\n      .prop('href')\n\n    expect(renderedLink).to.equal(tweetLink)\n  })\n\n  it('can handle every type', () => {\n    const PATTERNS = {\n      BUFFER: 'buffer',\n      DIGG: 'digg',\n      EMAIL: 'mailto',\n      FACEBOOK: 'facebook',\n      GOOGLE_PLUS: 'google',\n      LINKEDIN: 'linkedin',\n      PINTEREST: 'pinterest',\n      REDDIT: 'reddit',\n      TUMBLR: 'tumblr',\n      TWITTER: 'twitter',\n    }\n\n    for (const service in Social.types) {\n      if (Object.prototype.hasOwnProperty.call(Social.types, service)) {\n        const social = shallow(\n          <Social type={Social.types[service]} url=\"http://example.com\" />\n        )\n\n        expect(social.find('a').prop('href')).to.contain(PATTERNS[service])\n      }\n    }\n  })\n})\n"]}