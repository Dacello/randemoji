{"version":3,"sources":["../src/MediaUploader.js"],"names":["MediaUploader","props","updatePreview","e","getS3Info","reader","FileReader","input","target","file","files","addEventListener","valid","validateFile","value","setState","imagePreviewUrl","url","result","utils","uploadFileToS3","readAsDataURL","state","defaultPreview","supportedFileTypes","supportedFileTypesMessage","maxFileSize","maxFileSizeMessage","isTooBig","errorMessage","isUnsupportedFileType","imageClassName","previewClassNames","isVideoFile","name","renderImageOrVideoPreview","required","getValue","buttonLabel","className","helpText","label","placeholder","imagePreview","s3Input","getFileInputName","join","getRequired","Component","defaultProps","propTypes","PropTypes","string","func","number","bool","arrayOf"],"mappings":"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","file":"MediaUploader.js","sourcesContent":["import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport FileInput from './FileInput'\nimport utils from './MediaUploader/utils'\nimport classNames from 'classnames'\n\nclass MediaUploader extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      file: '',\n      imagePreviewUrl: props.defaultPreview || '',\n      valid: true,\n    }\n  }\n\n  // check file size and type and set the error message accordingly\n  validateFile(file) {\n    const {\n      supportedFileTypes,\n      supportedFileTypesMessage,\n      maxFileSize,\n      maxFileSizeMessage,\n    } = this.props\n\n    if (utils.isTooBig(file, maxFileSize)) {\n      this.setState({errorMessage: maxFileSizeMessage})\n      return false\n    }\n\n    if (utils.isUnsupportedFileType(file, supportedFileTypes)) {\n      this.setState({errorMessage: supportedFileTypesMessage})\n      return false\n    }\n\n    return true\n  }\n\n  // check if we have an image or a video\n  // and render the appropriate preview\n  renderImageOrVideoPreview() {\n    const {imageClassName} = this.props\n    const {imagePreviewUrl, file} = this.state\n    const previewClassNames = classNames(\n      'rev-MediaUploaderPreview',\n      imageClassName\n    )\n\n    if (file && utils.isVideoFile(file)) {\n      return (\n        <video\n          controls\n          className={previewClassNames}\n          alt={file.name}\n          src={imagePreviewUrl}\n        />\n      )\n    }\n\n    return (\n      <img\n        className={previewClassNames}\n        alt={file.name}\n        src={imagePreviewUrl}\n      />\n    )\n  }\n\n  // check if we should render the preview\n  imagePreview() {\n    const {imagePreviewUrl} = this.state\n\n    if (!imagePreviewUrl) {\n      return\n    }\n\n    return this.renderImageOrVideoPreview()\n  }\n\n  // read the new file, validate it, and upload to s3 if enabled\n  updatePreview = (e) => {\n    const {getS3Info} = this.props\n    const reader = new FileReader()\n    const input = e.target\n    const file = e.target.files[0]\n\n    reader.addEventListener('load', async () => {\n      const valid = this.validateFile(file)\n\n      if (valid === false) {\n        input.value = ''\n\n        this.setState({\n          imagePreviewUrl: '',\n          file: '',\n          valid,\n        })\n      } else {\n        let url = reader.result\n\n        if (getS3Info) {\n          url = await utils.uploadFileToS3(file, getS3Info)\n        }\n\n        this.setState({\n          imagePreviewUrl: url,\n          file,\n          valid,\n        })\n      }\n    })\n\n    if (file) {\n      reader.readAsDataURL(file)\n    }\n  }\n\n  // use a hidden input when in presigned URL mode\n  // since you can't set file input values programmatically\n  s3Input() {\n    const {getS3Info, name, defaultPreview, required} = this.props\n    const {imagePreviewUrl, valid} = this.state\n\n    function getValue() {\n      if (!valid) {\n        return ''\n      }\n\n      return imagePreviewUrl || defaultPreview\n    }\n\n    return (\n      getS3Info && (\n        <input\n          type=\"hidden\"\n          name={name}\n          value={getValue()}\n          id=\"s3-input\"\n          required={required}\n        />\n      )\n    )\n  }\n\n  // when in presigned URL mode, the file input is just there for looks\n  getFileInputName() {\n    const {getS3Info, name} = this.props\n\n    return getS3Info ? '' : name\n  }\n\n  getRequired() {\n    const {getS3Info, required} = this.props\n\n    return getS3Info ? false : required\n  }\n\n  render() {\n    const {buttonLabel, className, helpText, label, placeholder, supportedFileTypes} = this.props\n    const {file, valid, errorMessage} = this.state\n\n    return (\n      <div className={classNames('rev-MediaUploader', className)}>\n        {this.imagePreview()}\n        {this.s3Input()}\n        <FileInput.Stack\n          label={label}\n          button={buttonLabel}\n          placeholder={file.name || placeholder}\n          name={this.getFileInputName()}\n          accept={supportedFileTypes.join()}\n          onChange={this.updatePreview}\n          help={helpText}\n          error={!valid && errorMessage}\n          required={this.getRequired()}\n        />\n      </div>\n    )\n  }\n}\n\nMediaUploader.defaultProps = {\n  maxFileSize: 5,\n  maxFileSizeMessage: 'Please choose a smaller file',\n  placeholder: 'Choose file...',\n  supportedFileTypes: [\n    'image/png',\n    'image/jpg',\n    'image/jpeg',\n    'image/gif',\n    'video/mp4',\n  ],\n  supportedFileTypesMessage: 'Please choose a supported file type',\n}\n\nMediaUploader.propTypes = {\n  buttonLabel: PropTypes.string,\n  className: PropTypes.string,\n  defaultPreview: PropTypes.string,\n  getS3Info: PropTypes.func,\n  helpText: PropTypes.string,\n  imageClassName: PropTypes.string,\n  label: PropTypes.string,\n  maxFileSize: PropTypes.number,\n  maxFileSizeMessage: PropTypes.string,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool,\n  supportedFileTypes: PropTypes.arrayOf(PropTypes.string),\n  supportedFileTypesMessage: PropTypes.string,\n}\n\nexport default MediaUploader\n"]}