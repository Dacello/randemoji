{"version":3,"sources":["../src/Checkbox.test.js"],"names":["describe","it","testClassName","childClassName","first","prop","expect","to","contain","options","label","value","fieldset","children","eq"],"mappings":";;AAAA;;;;AACA;;AACA;;;;;;AAEAA,SAAS,UAAT,EAAqB,YAAM;AACzBC,KAAG,gCAAH,EAAqC,YAAM;AACzC,yBAAQ,8BAAC,kBAAD,OAAR;AACD,GAFD;;AAIAA,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAMC,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiB,qBAAQ,8BAAC,kBAAD,IAAU,WAAWD,aAArB,GAAR,EACpBE,KADoB,GAEpBC,IAFoB,CAEf,WAFe,CAAvB;;AAIAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GARD;AASD,CAdD;;AAgBAF,SAAS,mBAAT,EAA8B,YAAM;AAClC,MAAMS,UAAU,CAAC,EAACC,OAAO,MAAR,EAAgBC,OAAO,GAAvB,EAAD,EAA8B,EAACD,OAAO,OAAR,EAAiBC,OAAO,GAAxB,EAA9B,CAAhB;;AAEAV,KAAG,gCAAH,EAAqC,YAAM;AACzC,yBAAQ,8BAAC,kBAAD,CAAU,QAAV,IAAmB,SAASQ,OAA5B,GAAR;AACD,GAFD;;AAIAR,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAMC,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiB,qBACrB,8BAAC,kBAAD,CAAU,QAAV,IAAmB,WAAWD,aAA9B,EAA6C,SAASO,OAAtD,GADqB,EAGpBL,KAHoB,GAIpBC,IAJoB,CAIf,WAJe,CAAvB;;AAMAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GAVD;;AAYAD,KAAG,6BAAH,EAAkC,YAAM;AACtC,QAAMW,WAAW,qBACf,8BAAC,kBAAD,CAAU,QAAV,IAAmB,SAASH,OAA5B,EAAqC,OAAO,CAAC,GAAD,CAA5C,GADe,CAAjB;;AAIAH,WACEM,SACGC,QADH,GAEGT,KAFH,GAGGC,IAHH,CAGQ,SAHR,CADF,EAKEE,EALF,CAKKO,EALL,CAKQ,IALR;AAMD,GAXD;;AAaAb,KAAG,wBAAH,EAA6B,YAAM;AACjC,QAAMW,WAAW,qBACf,8BAAC,kBAAD,CAAU,QAAV,IAAmB,SAASH,OAA5B,EAAqC,cAAc,CAAC,GAAD,CAAnD,GADe,CAAjB;;AAIAH,WACEM,SACGC,QADH,GAEGT,KAFH,GAGGC,IAHH,CAGQ,gBAHR,CADF,EAKEE,EALF,CAKKO,EALL,CAKQ,IALR;AAMD,GAXD;AAYD,CA5CD","file":"Checkbox.test.js","sourcesContent":["import React from 'react'\nimport {shallow} from 'enzyme'\nimport Checkbox from './Checkbox'\n\ndescribe('Checkbox', () => {\n  it('should render without throwing', () => {\n    shallow(<Checkbox />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(<Checkbox className={testClassName} />)\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(testClassName)\n  })\n})\n\ndescribe('Checkbox.Fieldset', () => {\n  const options = [{label: 'Left', value: 'L'}, {label: 'Right', value: 'R'}]\n\n  it('should render without throwing', () => {\n    shallow(<Checkbox.Fieldset options={options} />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(\n      <Checkbox.Fieldset className={testClassName} options={options} />\n    )\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(testClassName)\n  })\n\n  it('handles the controlled case', () => {\n    const fieldset = shallow(\n      <Checkbox.Fieldset options={options} value={['L']} />\n    )\n\n    expect(\n      fieldset\n        .children()\n        .first()\n        .prop('checked')\n    ).to.eq(true)\n  })\n\n  it('handles default values', () => {\n    const fieldset = shallow(\n      <Checkbox.Fieldset options={options} defaultValue={['L']} />\n    )\n\n    expect(\n      fieldset\n        .children()\n        .first()\n        .prop('defaultChecked')\n    ).to.eq(true)\n  })\n})\n"]}