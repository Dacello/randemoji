{"version":3,"sources":["../../src/Map/MapComponent.js"],"names":["BOOL_PROPS_TO_CLASS_NAMES","small","medium","large","BOOL_PROPS","Object","keys","evtNames","MapComponent","initMap","apiKey","props","process","env","GATSBY_apiKey","loadMap","mapScript","window","document","getElementById","listeners","forEach","e","google","maps","event","removeListener","propClassNames","reduce","acc","key","value","newClassName","mapConfig","backgroundColor","center","clickableIcons","disableDefaultUI","disableDoubleClickZoom","draggable","draggableCursor","draggingCursor","fullscreenControl","gestureHandling","heading","keyboardShortcuts","mapTypeControl","mapTypeId","maxZoom","minZoom","noClear","panControl","rotateControl","scaleControl","scrollwheel","streetViewControl","style","styles","tilt","zoom","zoomControl","geocoder","Geocoder","geocode","address","results","status","geometry","location","buildMap","alert","map","Map","addListener","handleEvent","forceUpdate","evt","evtName","children","React","Children","child","cloneElement","renderChildren","Component","propTypes","PropTypes","string","isRequired","oneOfType","object","array","bool","number","defaultProps","width","height","func"],"mappings":"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","file":"MapComponent.js","sourcesContent":["import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport {camelize, loadJS} from './Utilities/Utils'\n\nconst BOOL_PROPS_TO_CLASS_NAMES = {\n  small: 'rev-Map--small',\n  medium: 'rev-Map--medium',\n  large: 'rev-Map--large',\n}\n\nconst BOOL_PROPS = Object.keys(BOOL_PROPS_TO_CLASS_NAMES)\n\nconst evtNames = [\n  'bounds_changed',\n  'center_changed',\n  'click',\n  'dblclick',\n  'drag',\n  'dragend',\n  'dragstart',\n  'heading_changed',\n  'idle',\n  'maptypeid_changed',\n  'mousemove',\n  'mouseout',\n  'mouseover',\n  'projection_changed',\n  'resize',\n  'rightclick',\n  'tilesloaded',\n  'tilt_changed',\n  'zoom_changed',\n]\n\nexport default class MapComponent extends Component {\n  componentDidMount() {\n    const mapScript = window.document.getElementById('mapScript')\n\n    if (!mapScript) {\n      this.initMap()\n    } else {\n      this.loadMap()\n    }\n  }\n\n  componentWillUnmount() {\n    Object.keys(this.listeners).forEach((e) => {\n      google.maps.event.removeListener(this.listeners[e])\n    })\n  }\n\n  initMap = async () => {\n    // this is added for the examples pruposes\n    const apiKey =\n      typeof this.props.apiKey === 'string'\n        ? this.props.apiKey\n        : process.env.GATSBY_apiKey\n\n    await loadJS(`https://maps.googleapis.com/maps/api/js?key=${apiKey}`)\n    this.loadMap()\n  }\n\n  loadMap() {\n    const propClassNames = BOOL_PROPS.reduce((acc, key) => {\n      const value = BOOL_PROPS_TO_CLASS_NAMES[key]\n\n      acc[value] = this.props[key]\n      return acc\n    }, {})\n\n    this.newClassName = classNames(propClassNames)\n\n    this.mapConfig = {\n      apiKey: this.props.apiKey,\n      backgroundColor: this.props.backgroundColor,\n      center: this.props.center,\n      clickableIcons: !!this.props.clickableIcons,\n      disableDefaultUI: this.props.disableDefaultUI,\n      disableDoubleClickZoom: this.props.disableDoubleClickZoom,\n      draggable: this.props.draggable,\n      draggableCursor: this.props.draggableCursor,\n      draggingCursor: this.props.draggingCursor,\n      fullscreenControl: this.props.fullscreenControl,\n      gestureHandling: this.props.gestureHandling,\n      heading: this.props.heading,\n      keyboardShortcuts: this.props.keyboardShortcuts,\n      mapTypeControl: this.props.mapTypeControl,\n      mapTypeId: this.props.mapTypeId,\n      maxZoom: this.props.maxZoom,\n      minZoom: this.props.minZoom,\n      noClear: this.props.noClear,\n      panControl: this.props.panControl,\n      rotateControl: this.props.rotateControl,\n      scaleControl: this.props.scaleControl,\n      scrollwheel: this.props.scrollwheel,\n      streetViewControl: this.props.streetViewControl,\n      style: this.props.style,\n      styles: this.props.styles,\n      tilt: this.props.tilt,\n      zoom: this.props.zoom,\n      zoomControl: this.props.zoomControl,\n    }\n\n    if (typeof this.props.center === 'string') {\n      const geocoder = new google.maps.Geocoder()\n\n      geocoder.geocode({address: this.props.center}, (results, status) => {\n        if (status === 'OK') {\n          this.mapConfig.center = results[0].geometry.location\n          this.buildMap()\n        } else {\n          alert(`Map geocoder problem type: ${status}`)\n        }\n      })\n    } else {\n      this.buildMap()\n    }\n  }\n\n  buildMap() {\n    this.map = new google.maps.Map(\n      document.getElementById('map'),\n      this.mapConfig\n    )\n    this.listeners = {} // attached to MapComponent\n    evtNames.forEach((e) => {\n      this.listeners[e] = this.map.addListener(e, this.handleEvent(e))\n    })\n    this.forceUpdate()\n    /*  https://reactjs.org/docs/react-component.html#forceupdate\n    https://reactjs.org/docs/react-component.html#shouldcomponentupdate */\n  }\n\n  handleEvent(evt) {\n    return (e) => {\n      const evtName = `on${camelize(evt)}`\n\n      if (this.props[evtName]) {\n        this.props[evtName](this.props, this.map, e)\n      }\n    }\n  }\n\n  renderChildren() {\n    const {children} = this.props\n\n    if (!children) {\n      return ''\n    }\n    return React.Children.map(children, (child) => {\n      if (!child) {\n        return ''\n      }\n      return React.cloneElement(child, {\n        map: this.map,\n      })\n    })\n  }\n  /* eslint complexity: [2, 4] */\n  render() {\n    return (\n      <div>\n        {this.props.apiKey ? '' : <h4>Missing API Key!</h4>}\n        {this.props.center ? '' : <h4>Missing center props!</h4>}\n        <div\n          id=\"map\"\n          className={this.newClassName}\n          style={this.newClassName ? {} : this.props.style}\n        />\n        {this.renderChildren()}\n      </div>\n    )\n  }\n}\n\n/* See Documentation\nhttps://developers.google.com/maps/documentation/javascript/reference/3.exp/map#MapOptions */\n\nMapComponent.propTypes = {\n  apiKey: PropTypes.string.isRequired,\n  backgroundColor: PropTypes.string,\n  center: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  children: PropTypes.array,\n  clickableIcons: PropTypes.bool,\n  disableDefaultUI: PropTypes.bool,\n  disableDoubleClickZoom: PropTypes.bool,\n  draggable: PropTypes.bool,\n  draggableCursor: PropTypes.string,\n  draggingCursor: PropTypes.string,\n  fullscreenControl: PropTypes.bool,\n  gestureHandling: PropTypes.string,\n  heading: PropTypes.number,\n  keyboardShortcuts: PropTypes.bool,\n  mapTypeControl: PropTypes.bool,\n  mapTypeId: PropTypes.string,\n  maxZoom: PropTypes.number,\n  minZoom: PropTypes.number,\n  noClear: PropTypes.bool,\n  panControl: PropTypes.bool,\n  rotateControl: PropTypes.bool,\n  scaleControl: PropTypes.bool,\n  scrollwheel: PropTypes.bool,\n  streetViewControl: PropTypes.bool,\n  style: PropTypes.object,\n  styles: PropTypes.array,\n  tilt: PropTypes.number,\n  zoom: PropTypes.number,\n  zoomControl: PropTypes.bool,\n}\n\nMapComponent.defaultProps = {\n  zoom: 14,\n  style: {\n    width: '55vw',\n    height: '55vh',\n  },\n}\n\nevtNames.forEach((e) => (MapComponent.propTypes[camelize(e)] = PropTypes.func))\n"]}