'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InfoWindow = function (_Component) {
  _inherits(InfoWindow, _Component);

  function InfoWindow() {
    _classCallCheck(this, InfoWindow);

    return _possibleConstructorReturn(this, (InfoWindow.__proto__ || Object.getPrototypeOf(InfoWindow)).apply(this, arguments));
  }

  _createClass(InfoWindow, [{
    key: 'componentDidUpdate',

    /* eslint complexity: [2, 5] */
    value: function componentDidUpdate(prevProps) {
      var _props = this.props,
          visible = _props.visible,
          marker = _props.marker,
          map = _props.map;


      if (!map) {
        return '';
      }

      if (map !== prevProps.map) {
        this.renderInfoWindow();
      }

      if (prevProps.marker !== marker) {
        this.updateContent();
      }

      if (visible) {
        return this.openInfoWindow();
      } else {
        return this.closeInfoWindow();
      }
    }
  }, {
    key: 'renderInfoWindow',
    value: function renderInfoWindow() {
      var content = this.props.content;


      var InfoWindowConfig = {
        content: content
      };

      this.infowindow = new google.maps.InfoWindow(InfoWindowConfig);
    }
  }, {
    key: 'updateContent',
    value: function updateContent() {
      var content = this.props.content;


      this.infowindow.setContent(content);
    }
  }, {
    key: 'openInfoWindow',
    value: function openInfoWindow() {
      var _props2 = this.props,
          map = _props2.map,
          marker = _props2.marker;


      if (marker) {
        return this.infowindow.open(map, marker);
      }
      return '';
    }
  }, {
    key: 'closeInfoWindow',
    value: function closeInfoWindow() {
      return this.infowindow.close();
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return InfoWindow;
}(_react.Component);

exports.default = InfoWindow;


InfoWindow.propTypes = {
  map: _propTypes2.default.object,
  marker: _propTypes2.default.object,
  visible: _propTypes2.default.bool,
  content: _propTypes2.default.string.isRequired
};
//# sourceMappingURL=InfoWindow.js.map