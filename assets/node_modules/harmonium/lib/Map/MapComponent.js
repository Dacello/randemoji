'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Utils = require('./Utilities/Utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BOOL_PROPS_TO_CLASS_NAMES = {
  small: 'rev-Map--small',
  medium: 'rev-Map--medium',
  large: 'rev-Map--large'
};

var BOOL_PROPS = Object.keys(BOOL_PROPS_TO_CLASS_NAMES);

var evtNames = ['bounds_changed', 'center_changed', 'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'heading_changed', 'idle', 'maptypeid_changed', 'mousemove', 'mouseout', 'mouseover', 'projection_changed', 'resize', 'rightclick', 'tilesloaded', 'tilt_changed', 'zoom_changed'];

var MapComponent = function (_Component) {
  _inherits(MapComponent, _Component);

  function MapComponent() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    _classCallCheck(this, MapComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MapComponent.__proto__ || Object.getPrototypeOf(MapComponent)).call.apply(_ref, [this].concat(args))), _this), _this.initMap = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var apiKey;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // this is added for the examples pruposes
              apiKey = typeof _this.props.apiKey === 'string' ? _this.props.apiKey : process.env.GATSBY_apiKey;
              _context.next = 3;
              return (0, _Utils.loadJS)('https://maps.googleapis.com/maps/api/js?key=' + apiKey);

            case 3:
              _this.loadMap();

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this2);
    })), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(MapComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var mapScript = window.document.getElementById('mapScript');

      if (!mapScript) {
        this.initMap();
      } else {
        this.loadMap();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var _this3 = this;

      Object.keys(this.listeners).forEach(function (e) {
        google.maps.event.removeListener(_this3.listeners[e]);
      });
    }
  }, {
    key: 'loadMap',
    value: function loadMap() {
      var _this4 = this;

      var propClassNames = BOOL_PROPS.reduce(function (acc, key) {
        var value = BOOL_PROPS_TO_CLASS_NAMES[key];

        acc[value] = _this4.props[key];
        return acc;
      }, {});

      this.newClassName = (0, _classnames2.default)(propClassNames);

      this.mapConfig = {
        apiKey: this.props.apiKey,
        backgroundColor: this.props.backgroundColor,
        center: this.props.center,
        clickableIcons: !!this.props.clickableIcons,
        disableDefaultUI: this.props.disableDefaultUI,
        disableDoubleClickZoom: this.props.disableDoubleClickZoom,
        draggable: this.props.draggable,
        draggableCursor: this.props.draggableCursor,
        draggingCursor: this.props.draggingCursor,
        fullscreenControl: this.props.fullscreenControl,
        gestureHandling: this.props.gestureHandling,
        heading: this.props.heading,
        keyboardShortcuts: this.props.keyboardShortcuts,
        mapTypeControl: this.props.mapTypeControl,
        mapTypeId: this.props.mapTypeId,
        maxZoom: this.props.maxZoom,
        minZoom: this.props.minZoom,
        noClear: this.props.noClear,
        panControl: this.props.panControl,
        rotateControl: this.props.rotateControl,
        scaleControl: this.props.scaleControl,
        scrollwheel: this.props.scrollwheel,
        streetViewControl: this.props.streetViewControl,
        style: this.props.style,
        styles: this.props.styles,
        tilt: this.props.tilt,
        zoom: this.props.zoom,
        zoomControl: this.props.zoomControl
      };

      if (typeof this.props.center === 'string') {
        var geocoder = new google.maps.Geocoder();

        geocoder.geocode({ address: this.props.center }, function (results, status) {
          if (status === 'OK') {
            _this4.mapConfig.center = results[0].geometry.location;
            _this4.buildMap();
          } else {
            alert('Map geocoder problem type: ' + status);
          }
        });
      } else {
        this.buildMap();
      }
    }
  }, {
    key: 'buildMap',
    value: function buildMap() {
      var _this5 = this;

      this.map = new google.maps.Map(document.getElementById('map'), this.mapConfig);
      this.listeners = {}; // attached to MapComponent
      evtNames.forEach(function (e) {
        _this5.listeners[e] = _this5.map.addListener(e, _this5.handleEvent(e));
      });
      this.forceUpdate();
      /*  https://reactjs.org/docs/react-component.html#forceupdate
      https://reactjs.org/docs/react-component.html#shouldcomponentupdate */
    }
  }, {
    key: 'handleEvent',
    value: function handleEvent(evt) {
      var _this6 = this;

      return function (e) {
        var evtName = 'on' + (0, _Utils.camelize)(evt);

        if (_this6.props[evtName]) {
          _this6.props[evtName](_this6.props, _this6.map, e);
        }
      };
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren() {
      var _this7 = this;

      var children = this.props.children;


      if (!children) {
        return '';
      }
      return _react2.default.Children.map(children, function (child) {
        if (!child) {
          return '';
        }
        return _react2.default.cloneElement(child, {
          map: _this7.map
        });
      });
    }
    /* eslint complexity: [2, 4] */

  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        this.props.apiKey ? '' : _react2.default.createElement(
          'h4',
          null,
          'Missing API Key!'
        ),
        this.props.center ? '' : _react2.default.createElement(
          'h4',
          null,
          'Missing center props!'
        ),
        _react2.default.createElement('div', {
          id: 'map',
          className: this.newClassName,
          style: this.newClassName ? {} : this.props.style
        }),
        this.renderChildren()
      );
    }
  }]);

  return MapComponent;
}(_react.Component);

/* See Documentation
https://developers.google.com/maps/documentation/javascript/reference/3.exp/map#MapOptions */

exports.default = MapComponent;
MapComponent.propTypes = {
  apiKey: _propTypes2.default.string.isRequired,
  backgroundColor: _propTypes2.default.string,
  center: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired,
  children: _propTypes2.default.array,
  clickableIcons: _propTypes2.default.bool,
  disableDefaultUI: _propTypes2.default.bool,
  disableDoubleClickZoom: _propTypes2.default.bool,
  draggable: _propTypes2.default.bool,
  draggableCursor: _propTypes2.default.string,
  draggingCursor: _propTypes2.default.string,
  fullscreenControl: _propTypes2.default.bool,
  gestureHandling: _propTypes2.default.string,
  heading: _propTypes2.default.number,
  keyboardShortcuts: _propTypes2.default.bool,
  mapTypeControl: _propTypes2.default.bool,
  mapTypeId: _propTypes2.default.string,
  maxZoom: _propTypes2.default.number,
  minZoom: _propTypes2.default.number,
  noClear: _propTypes2.default.bool,
  panControl: _propTypes2.default.bool,
  rotateControl: _propTypes2.default.bool,
  scaleControl: _propTypes2.default.bool,
  scrollwheel: _propTypes2.default.bool,
  streetViewControl: _propTypes2.default.bool,
  style: _propTypes2.default.object,
  styles: _propTypes2.default.array,
  tilt: _propTypes2.default.number,
  zoom: _propTypes2.default.number,
  zoomControl: _propTypes2.default.bool
};

MapComponent.defaultProps = {
  zoom: 14,
  style: {
    width: '55vw',
    height: '55vh'
  }
};

evtNames.forEach(function (e) {
  return MapComponent.propTypes[(0, _Utils.camelize)(e)] = _propTypes2.default.func;
});
//# sourceMappingURL=MapComponent.js.map