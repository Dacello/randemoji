{"version":3,"sources":["../../src/Map/Marker.js"],"names":["evtNames","Marker","props","map","loadMarker","marker","setMap","position","icon","label","title","draggable","markerConfig","geocoder","google","maps","Geocoder","geocode","address","results","status","geometry","location","buildMarker","alert","forEach","e","addListener","handleEvent","evt","evtName","Component","propTypes","PropTypes","object","oneOfType","string","isRequired","bool","func"],"mappings":"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","file":"Marker.js","sourcesContent":["import {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {camelize} from './Utilities/Utils'\n\n/* See Documentation\nhttps://developers.google.com/maps/documentation/javascript/markers */\n\nconst evtNames = [\n  'click',\n  'dblclick',\n  'dragend',\n  'mousedown',\n  'mouseout',\n  'mouseover',\n  'mouseup',\n  'recenter',\n]\n\nexport default class Marker extends Component {\n  componentDidUpdate() {\n    if (this.props && this.props.map) {\n      this.loadMarker()\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.marker) {\n      this.marker.setMap(null)\n    }\n  }\n\n  loadMarker() {\n    const {map, position, icon, label, title, draggable} = this.props\n\n    this.markerConfig = {\n      map,\n      position,\n      icon,\n      label,\n      title,\n      draggable,\n      // animation: animation\n      /* how to deal with animation, state of the big container, wrapper? */\n    }\n\n    if (typeof this.props.position === 'string') {\n      const geocoder = new google.maps.Geocoder()\n\n      geocoder.geocode({address: this.props.position}, (results, status) => {\n        if (status === 'OK') {\n          this.markerConfig.position = results[0].geometry.location\n          this.buildMarker()\n        } else {\n          alert(`Marker geocoder problem type: ${status}`)\n        }\n      })\n    } else {\n      this.buildMarker()\n    }\n  }\n\n  buildMarker() {\n    this.marker = new google.maps.Marker(this.markerConfig)\n    evtNames.forEach((e) => {\n      this.marker.addListener(e, this.handleEvent(e))\n    })\n    return this.marker\n  }\n\n  handleEvent(evt) {\n    return (e) => {\n      const evtName = `on${camelize(evt)}`\n\n      if (this.props[evtName]) {\n        this.props[evtName](this.props, this.marker, e) //* **purpose of passing this.props?* */\n      }\n    }\n  }\n\n  render() {\n    return null\n  }\n}\n\nMarker.propTypes = {\n  map: PropTypes.object,\n  position: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n    .isRequired,\n  icon: PropTypes.object,\n  label: PropTypes.string,\n  title: PropTypes.string,\n  draggable: PropTypes.bool,\n}\n\nevtNames.forEach((e) => (Marker.propTypes[camelize(e)] = PropTypes.func))\n"]}