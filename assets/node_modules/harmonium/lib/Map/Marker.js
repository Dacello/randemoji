'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Utils = require('./Utilities/Utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* See Documentation
https://developers.google.com/maps/documentation/javascript/markers */

var evtNames = ['click', 'dblclick', 'dragend', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'recenter'];

var Marker = function (_Component) {
  _inherits(Marker, _Component);

  function Marker() {
    _classCallCheck(this, Marker);

    return _possibleConstructorReturn(this, (Marker.__proto__ || Object.getPrototypeOf(Marker)).apply(this, arguments));
  }

  _createClass(Marker, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.props && this.props.map) {
        this.loadMarker();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.marker) {
        this.marker.setMap(null);
      }
    }
  }, {
    key: 'loadMarker',
    value: function loadMarker() {
      var _this2 = this;

      var _props = this.props,
          map = _props.map,
          position = _props.position,
          icon = _props.icon,
          label = _props.label,
          title = _props.title,
          draggable = _props.draggable;


      this.markerConfig = {
        map: map,
        position: position,
        icon: icon,
        label: label,
        title: title,
        draggable: draggable
        // animation: animation
        /* how to deal with animation, state of the big container, wrapper? */
      };

      if (typeof this.props.position === 'string') {
        var geocoder = new google.maps.Geocoder();

        geocoder.geocode({ address: this.props.position }, function (results, status) {
          if (status === 'OK') {
            _this2.markerConfig.position = results[0].geometry.location;
            _this2.buildMarker();
          } else {
            alert('Marker geocoder problem type: ' + status);
          }
        });
      } else {
        this.buildMarker();
      }
    }
  }, {
    key: 'buildMarker',
    value: function buildMarker() {
      var _this3 = this;

      this.marker = new google.maps.Marker(this.markerConfig);
      evtNames.forEach(function (e) {
        _this3.marker.addListener(e, _this3.handleEvent(e));
      });
      return this.marker;
    }
  }, {
    key: 'handleEvent',
    value: function handleEvent(evt) {
      var _this4 = this;

      return function (e) {
        var evtName = 'on' + (0, _Utils.camelize)(evt);

        if (_this4.props[evtName]) {
          _this4.props[evtName](_this4.props, _this4.marker, e); //* **purpose of passing this.props?* */
        }
      };
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return Marker;
}(_react.Component);

exports.default = Marker;


Marker.propTypes = {
  map: _propTypes2.default.object,
  position: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired,
  icon: _propTypes2.default.object,
  label: _propTypes2.default.string,
  title: _propTypes2.default.string,
  draggable: _propTypes2.default.bool
};

evtNames.forEach(function (e) {
  return Marker.propTypes[(0, _Utils.camelize)(e)] = _propTypes2.default.func;
});
//# sourceMappingURL=Marker.js.map