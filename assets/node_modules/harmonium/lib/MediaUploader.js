'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _FileInput = require('./FileInput');

var _FileInput2 = _interopRequireDefault(_FileInput);

var _utils = require('./MediaUploader/utils');

var _utils2 = _interopRequireDefault(_utils);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MediaUploader = function (_Component) {
  _inherits(MediaUploader, _Component);

  function MediaUploader(props) {
    var _this2 = this;

    _classCallCheck(this, MediaUploader);

    var _this = _possibleConstructorReturn(this, (MediaUploader.__proto__ || Object.getPrototypeOf(MediaUploader)).call(this, props));

    _this.updatePreview = function (e) {
      var getS3Info = _this.props.getS3Info;

      var reader = new FileReader();
      var input = e.target;
      var file = e.target.files[0];

      reader.addEventListener('load', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var valid, url;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                valid = _this.validateFile(file);

                if (!(valid === false)) {
                  _context.next = 6;
                  break;
                }

                input.value = '';

                _this.setState({
                  imagePreviewUrl: '',
                  file: '',
                  valid: valid
                });
                _context.next = 12;
                break;

              case 6:
                url = reader.result;

                if (!getS3Info) {
                  _context.next = 11;
                  break;
                }

                _context.next = 10;
                return _utils2.default.uploadFileToS3(file, getS3Info);

              case 10:
                url = _context.sent;

              case 11:

                _this.setState({
                  imagePreviewUrl: url,
                  file: file,
                  valid: valid
                });

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2);
      })));

      if (file) {
        reader.readAsDataURL(file);
      }
    };

    _this.state = {
      file: '',
      imagePreviewUrl: props.defaultPreview || '',
      valid: true
    };
    return _this;
  }

  // check file size and type and set the error message accordingly


  _createClass(MediaUploader, [{
    key: 'validateFile',
    value: function validateFile(file) {
      var _props = this.props,
          supportedFileTypes = _props.supportedFileTypes,
          supportedFileTypesMessage = _props.supportedFileTypesMessage,
          maxFileSize = _props.maxFileSize,
          maxFileSizeMessage = _props.maxFileSizeMessage;


      if (_utils2.default.isTooBig(file, maxFileSize)) {
        this.setState({ errorMessage: maxFileSizeMessage });
        return false;
      }

      if (_utils2.default.isUnsupportedFileType(file, supportedFileTypes)) {
        this.setState({ errorMessage: supportedFileTypesMessage });
        return false;
      }

      return true;
    }

    // check if we have an image or a video
    // and render the appropriate preview

  }, {
    key: 'renderImageOrVideoPreview',
    value: function renderImageOrVideoPreview() {
      var imageClassName = this.props.imageClassName;
      var _state = this.state,
          imagePreviewUrl = _state.imagePreviewUrl,
          file = _state.file;

      var previewClassNames = (0, _classnames2.default)('rev-MediaUploaderPreview', imageClassName);

      if (file && _utils2.default.isVideoFile(file)) {
        return _react2.default.createElement('video', {
          controls: true,
          className: previewClassNames,
          alt: file.name,
          src: imagePreviewUrl
        });
      }

      return _react2.default.createElement('img', {
        className: previewClassNames,
        alt: file.name,
        src: imagePreviewUrl
      });
    }

    // check if we should render the preview

  }, {
    key: 'imagePreview',
    value: function imagePreview() {
      var imagePreviewUrl = this.state.imagePreviewUrl;


      if (!imagePreviewUrl) {
        return;
      }

      return this.renderImageOrVideoPreview();
    }

    // read the new file, validate it, and upload to s3 if enabled

  }, {
    key: 's3Input',


    // use a hidden input when in presigned URL mode
    // since you can't set file input values programmatically
    value: function s3Input() {
      var _props2 = this.props,
          getS3Info = _props2.getS3Info,
          name = _props2.name,
          defaultPreview = _props2.defaultPreview,
          required = _props2.required;
      var _state2 = this.state,
          imagePreviewUrl = _state2.imagePreviewUrl,
          valid = _state2.valid;


      function getValue() {
        if (!valid) {
          return '';
        }

        return imagePreviewUrl || defaultPreview;
      }

      return getS3Info && _react2.default.createElement('input', {
        type: 'hidden',
        name: name,
        value: getValue(),
        id: 's3-input',
        required: required
      });
    }

    // when in presigned URL mode, the file input is just there for looks

  }, {
    key: 'getFileInputName',
    value: function getFileInputName() {
      var _props3 = this.props,
          getS3Info = _props3.getS3Info,
          name = _props3.name;


      return getS3Info ? '' : name;
    }
  }, {
    key: 'getRequired',
    value: function getRequired() {
      var _props4 = this.props,
          getS3Info = _props4.getS3Info,
          required = _props4.required;


      return getS3Info ? false : required;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props5 = this.props,
          buttonLabel = _props5.buttonLabel,
          className = _props5.className,
          helpText = _props5.helpText,
          label = _props5.label,
          placeholder = _props5.placeholder,
          supportedFileTypes = _props5.supportedFileTypes;
      var _state3 = this.state,
          file = _state3.file,
          valid = _state3.valid,
          errorMessage = _state3.errorMessage;


      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('rev-MediaUploader', className) },
        this.imagePreview(),
        this.s3Input(),
        _react2.default.createElement(_FileInput2.default.Stack, {
          label: label,
          button: buttonLabel,
          placeholder: file.name || placeholder,
          name: this.getFileInputName(),
          accept: supportedFileTypes.join(),
          onChange: this.updatePreview,
          help: helpText,
          error: !valid && errorMessage,
          required: this.getRequired()
        })
      );
    }
  }]);

  return MediaUploader;
}(_react.Component);

MediaUploader.defaultProps = {
  maxFileSize: 5,
  maxFileSizeMessage: 'Please choose a smaller file',
  placeholder: 'Choose file...',
  supportedFileTypes: ['image/png', 'image/jpg', 'image/jpeg', 'image/gif', 'video/mp4'],
  supportedFileTypesMessage: 'Please choose a supported file type'
};

MediaUploader.propTypes = {
  buttonLabel: _propTypes2.default.string,
  className: _propTypes2.default.string,
  defaultPreview: _propTypes2.default.string,
  getS3Info: _propTypes2.default.func,
  helpText: _propTypes2.default.string,
  imageClassName: _propTypes2.default.string,
  label: _propTypes2.default.string,
  maxFileSize: _propTypes2.default.number,
  maxFileSizeMessage: _propTypes2.default.string,
  name: _propTypes2.default.string,
  placeholder: _propTypes2.default.string,
  required: _propTypes2.default.bool,
  supportedFileTypes: _propTypes2.default.arrayOf(_propTypes2.default.string),
  supportedFileTypesMessage: _propTypes2.default.string
};

exports.default = MediaUploader;
//# sourceMappingURL=MediaUploader.js.map