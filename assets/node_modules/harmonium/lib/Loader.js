'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-unused-vars */
var PROP_TYPES = {
  borderWidth: _propTypes2.default.string,
  children: _propTypes2.default.element,
  color: _propTypes2.default.string,
  duration: _propTypes2.default.string,
  huge: _propTypes2.default.bool,
  large: _propTypes2.default.bool,
  medium: _propTypes2.default.bool,
  secondaryColor: _propTypes2.default.string,
  size: _propTypes2.default.string,
  small: _propTypes2.default.bool

  /*
   * Size-related props.
   * Itemizes style configurations for the various size props that may be passed.
   **/
};var sizeRelatedProps = ['huge', 'large', 'medium', 'size', 'small'];

/*
 * Increment.
 * Provided a number, returns its value, incremented by one.
 **/
function inc() {
  var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  return num + 1;
}

var Loader = function (_Component) {
  _inherits(Loader, _Component);

  function Loader() {
    _classCallCheck(this, Loader);

    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).apply(this, arguments));
  }

  _createClass(Loader, [{
    key: 'sumPropsInObj',

    /*
     * Sum properties in object.
     * Provided a list of attributes, and provided an object, returns an integer
     * representing the total number of attributes encompassed by the object.
     **/
    value: function sumPropsInObj() {
      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return (0, _lodash.reduce)(attrs, function (acc, curr) {
        return (0, _lodash.has)(obj, curr) ? inc(acc) : acc;
      }, 0);
    }

    /*
     * Ensure no prop conflicts.
     * Verifies that developer has not passed any conflicting props. Provided so,
     * throws an error.
     **/

  }, {
    key: 'ensureNoConflicts',
    value: function ensureNoConflicts() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var sum = this.sumPropsInObj(sizeRelatedProps, props);

      if ((0, _lodash.gt)(sum, 1)) {
        throw Error('You have specified more than one of the following size-related props:\n        small, medium, large, huge, size. Only one of these props may be\n        specified per each component instance.');
      }
    }

    /*
     * Resolve class name.
     * Provided `this.props`, return a `className` that reflects only up to one of
     * our size-related props, such as `small`, `medium`, `large`, or `huge`.
     **/

  }, {
    key: 'resolveClassNames',
    value: function resolveClassNames() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // Allocate all size-related props except `size`.
      var classes = (0, _lodash.without)(sizeRelatedProps, 'size');

      return (0, _lodash.reduce)(classes, function (acc, curr) {
        return props[curr] ? acc.concat('rev-Loader--' + curr) : acc;
      }, '');
    }

    /*
     * Resolve styles.
     * Provided `this.props`, return a consolidated `styles` object, using
     * `this.props.style` as overrides.
     **/

  }, {
    key: 'resolveStyles',
    value: function resolveStyles() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var styles = {
        animationDuration: props.duration,
        borderColor: props.secondaryColor,
        borderTopColor: props.color,
        borderWidth: props.borderWidth,
        height: props.size,
        width: props.size
      };
      var overrides = props.style || {};

      return _extends({}, styles, overrides);
    }
  }, {
    key: 'render',
    value: function render() {
      var props = (0, _lodash.omit)(this.props, 'className');

      this.ensureNoConflicts(props);

      var classes = this.resolveClassNames(props);
      var styles = this.resolveStyles(props);

      return _react2.default.createElement(
        'div',
        { className: 'rev-Loader ' + classes, style: styles },
        props.children
      );
    }
  }]);

  return Loader;
}(_react.Component);

exports.default = Loader;
//# sourceMappingURL=Loader.js.map