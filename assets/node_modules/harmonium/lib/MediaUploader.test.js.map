{"version":3,"sources":["../src/MediaUploader.test.js"],"names":["describe","it","expect","shallow","not","to","throw","wrapper","mount","find","length","equal","setState","imagePreviewUrl","file","type","url","signed_request","valid","mediaUploaderUtils","isVideoFile","size","isTooBig","isUnsupportedFileType"],"mappings":"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","file":"MediaUploader.test.js","sourcesContent":["/* eslint-disable camelcase */\nimport React from 'react'\nimport MediaUploader from './MediaUploader'\nimport mediaUploaderUtils from './MediaUploader/utils'\n\ndescribe('MediaUploader', () => {\n  it('can render with no config', () => {\n    expect(() => shallow(<MediaUploader />)).not.to.throw()\n  })\n\n  it('updates the preview image when the state changes', () => {\n    const wrapper = mount(<MediaUploader defaultPreview=\"path/to/image.jpg\" />)\n\n    expect(wrapper.find('img[src=\"path/to/image.jpg\"]').length).to.equal(1)\n\n    wrapper.setState({imagePreviewUrl: 'anotherimage.jpg'})\n\n    expect(wrapper.find('img[src=\"anotherimage.jpg\"]').length).to.equal(1)\n  })\n\n  it('can preview a video file', () => {\n    const wrapper = mount(<MediaUploader />)\n\n    wrapper.setState({\n      imagePreviewUrl: 'another.mp4',\n      file: {type: 'video/mp4'},\n    })\n    expect(wrapper.find('video[src=\"another.mp4\"]').length).to.equal(1)\n  })\n\n  it('adjusts appropriately when in presigned URL mode', () => {\n    const wrapper = mount(\n      <MediaUploader\n        getS3Info={() => ({\n          url: '/fake/path',\n          signed_request: 'another/fake/path',\n        })}\n        name=\"image\"\n        required\n      />\n    )\n\n    expect(\n      wrapper.find('input[type=\"file\"][name=\"\"][required=false]').length\n    ).to.equal(1)\n    expect(\n      wrapper.find('input[type=\"hidden\"][name=\"image\"][required]').length\n    ).to.equal(1)\n  })\n\n  it('adjusts appropriately when file is invalid', () => {\n    const wrapper = mount(\n      <MediaUploader\n        getS3Info={() => ({\n          url: '/fake/path',\n          signed_request: 'another/fake/path',\n        })}\n        defaultPreview=\"fake.jpg\"\n      />\n    )\n\n    expect(\n      wrapper.find('input[type=\"hidden\"][value=\"fake.jpg\"]').length\n    ).to.equal(1)\n\n    wrapper.setState({\n      valid: false,\n    })\n\n    expect(wrapper.find('input[type=\"hidden\"][value=\"\"]').length).to.equal(1)\n  })\n\n  it('can check if a file is a video file', () => {\n    expect(mediaUploaderUtils.isVideoFile({type: ''})).to.equal(false)\n\n    const file = {type: 'video/mp4'}\n\n    expect(mediaUploaderUtils.isVideoFile(file)).to.equal(true)\n  })\n\n  it('can check if a file is too big', () => {\n    const file = {size: 10000000}\n\n    expect(mediaUploaderUtils.isTooBig(file, 10)).to.equal(false)\n    expect(mediaUploaderUtils.isTooBig(file, 1)).to.equal(true)\n  })\n\n  it('can check if a file is of an unsupported type', () => {\n    const file = {type: 'image/png'}\n\n    expect(\n      mediaUploaderUtils.isUnsupportedFileType(file, ['image/png'])\n    ).to.equal(false)\n    expect(\n      mediaUploaderUtils.isUnsupportedFileType(file, ['image/jpg'])\n    ).to.equal(true)\n  })\n})\n"]}