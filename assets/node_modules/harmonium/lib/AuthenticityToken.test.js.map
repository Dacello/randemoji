{"version":3,"sources":["../src/AuthenticityToken.test.js"],"names":["describe","it","provider","token","find","expect","prop","to","eq"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAEAA,SAAS,mBAAT,EAA8B,YAAM;AAClCC,KAAG,uCAAH,EAA4C,YAAM;AAChD,QAAMC,WAAW,mBACf;AAAC,yCAAD;AAAA,QAA2B,MAAK,MAAhC,EAAuC,OAAM,gBAA7C;AACE,oCAAC,2BAAD;AADF,KADe,CAAjB;AAKA,QAAMC,QAAQD,SAASE,IAAT,CAAc,OAAd,CAAd;;AAEAC,WAAOF,MAAMG,IAAN,CAAW,OAAX,CAAP,EAA4BC,EAA5B,CAA+BC,EAA/B,CAAkC,gBAAlC;AACD,GATD;AAUD,CAXD","file":"AuthenticityToken.test.js","sourcesContent":["import React from 'react'\nimport {mount} from 'enzyme'\nimport AuthenticityToken from './AuthenticityToken'\nimport AuthenticityTokenProvider from './AuthenticityTokenProvider'\n\ndescribe('AuthenticityToken', () => {\n  it('can render with token provide context', () => {\n    const provider = mount(\n      <AuthenticityTokenProvider name=\"csrf\" value=\"plz no hackerz\">\n        <AuthenticityToken />\n      </AuthenticityTokenProvider>\n    )\n    const token = provider.find('input')\n\n    expect(token.prop('value')).to.eq('plz no hackerz')\n  })\n})\n"]}