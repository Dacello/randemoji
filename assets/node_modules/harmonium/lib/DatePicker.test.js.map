{"version":3,"sources":["../src/DatePicker.test.js"],"names":["describe","it","testClassName","input","find","expect","exists","to","equal","setProps","defaultValue","update","Input","prop","spy","sinon","simulate","target","value","called","first","focusSpy","blurSpy","Calendar","contain","date","day","overrideComponent","DatePicker","text"],"mappings":"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","file":"DatePicker.test.js","sourcesContent":["import React from 'react'\nimport {shallow, mount} from 'enzyme'\nimport Calendar from './DatePicker/Calendar'\nimport DatePicker from './DatePicker'\nimport Input from './Input'\nimport sinon from 'sinon'\n\ndescribe('DatePicker', () => {\n  it('should render without throwing', () => {\n    shallow(<DatePicker />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const input = shallow(<DatePicker className={testClassName} />).find(\n      `.${testClassName}`\n    )\n\n    expect(input.exists()).to.equal(true)\n  })\n\n  it('should handle external date changes', () => {\n    const input = mount(<DatePicker defaultValue=\"2018-03-12\" />)\n\n    input.setProps({defaultValue: '2018-08-05'})\n    input.update()\n\n    expect(input.find(Input).prop('defaultValue')).to.equal('2018-08-05')\n  })\n\n  it('should handle external date changes', () => {\n    const spy = sinon.spy()\n    const input = mount(<DatePicker defaultValue=\"2018-03-12\" onChange={spy} />)\n\n    input.find('input').simulate('change', {target: {value: '2018-08-05'}})\n    input.update()\n\n    expect(input.find(Input).prop('defaultValue')).to.equal('2018-08-05')\n    expect(spy.called).to.equal(true)\n  })\n\n  it('should translate clicks on calendar cells into changes', () => {\n    const spy = sinon.spy()\n    const input = mount(\n      <DatePicker defaultValue=\"2018-03-12\" isOpen onChange={spy} />\n    )\n\n    input\n      .find('.rev-Calendar-body-bodyCell')\n      .find('button')\n      .first()\n      .simulate('click')\n\n    expect(input.find(Input).prop('defaultValue')).to.equal('2018-02-25')\n    expect(spy.called).to.equal(true)\n  })\n\n  it('opens the calendar on focus and hides it on blur', () => {\n    const focusSpy = sinon.spy()\n    const blurSpy = sinon.spy()\n\n    const input = mount(<DatePicker onBlur={blurSpy} onFocus={focusSpy} />)\n\n    input.find('input').simulate('focus')\n    input.update()\n\n    expect(input.find(Calendar).prop('className')).to.contain(\n      'rev-Calendar--open'\n    )\n    expect(focusSpy.called).to.equal(true)\n    expect(blurSpy.called).to.equal(false)\n\n    input.find('input').simulate('blur')\n    input.update()\n\n    expect(input.find(Calendar).prop('className')).to.contain(\n      'rev-Calendar--closed'\n    )\n    expect(blurSpy.called).to.equal(true)\n  })\n\n  it('keeps the calendar open when you do not have focus, but the mouse is over', () => {\n    const input = mount(<DatePicker />)\n\n    input.find('input').simulate('focus')\n    input.find('label').simulate('mouseOver')\n    input.find('input').simulate('blur')\n    input.update()\n\n    expect(input.find(Calendar).prop('className')).to.contain(\n      'rev-Calendar--open'\n    )\n\n    input.find('label').simulate('mouseOut')\n    input.update()\n    expect(input.find(Calendar).prop('className')).to.contain(\n      'rev-Calendar--closed'\n    )\n  })\n\n  it('can make items not selectable', () => {\n    const spy = sinon.spy()\n    const input = mount(\n      <DatePicker\n        defaultValue=\"2018-03-12\"\n        isOpen\n        onChange={spy}\n        isSelectable={(date) => date.day !== 1}\n      />\n    )\n\n    expect(\n      input.find('.rev-Calendar-body-bodyCell--unselectable').exists()\n    ).to.equal(true)\n\n    input\n      .find('.rev-Calendar-body-bodyCell--unselectable')\n      .find('button')\n      .first()\n      .simulate('click')\n\n    expect(input.find(Input).prop('defaultValue')).to.equal('2018-03-12')\n    expect(spy.called).to.equal(false)\n  })\n\n  it('handles an array of highlights', () => {\n    const input = mount(\n      <DatePicker\n        defaultValue=\"2018-03-12\"\n        highlights={['2018-03-15']}\n        isOpen\n      />\n    )\n\n    expect(\n      input.find('.rev-Calendar-body-bodyCell--highlighted').exists()\n    ).to.equal(true)\n  })\n\n  it('handles a hash of highlights', () => {\n    const input = mount(\n      <DatePicker\n        defaultValue=\"2018-03-12\"\n        highlights={{'2018-03-15': '__TEST__'}}\n        isOpen\n      />\n    )\n\n    expect(input.find('.__TEST__').exists()).to.equal(true)\n  })\n\n  it('handles a highlight function (that returns a class)', () => {\n    const input = mount(\n      <DatePicker\n        defaultValue=\"2018-03-12\"\n        highlights={(date) => (date.day % 2 === 0 ? '__TEST__' : '')}\n        isOpen\n      />\n    )\n\n    expect(input.find('.__TEST__').exists()).to.equal(true)\n  })\n\n  it('handles a highlight function (that returns a class)', () => {\n    const input = mount(\n      <DatePicker\n        defaultValue=\"2018-03-12\"\n        highlights={(date) => date.day % 2 === 0}\n        isOpen\n      />\n    )\n\n    expect(\n      input.find('.rev-Calendar-body-bodyCell--highlighted').exists()\n    ).to.equal(true)\n  })\n\n  it('does overrides', () => {\n    const overrideComponent = () => <span>AVeryUniqueString</span>\n    const input = mount(\n      <DatePicker\n        overrides={{[DatePicker.Calendar]: overrideComponent}}\n        isOpen\n      />\n    )\n\n    expect(input.text()).to.contain('AVeryUniqueString')\n  })\n})\n"]}