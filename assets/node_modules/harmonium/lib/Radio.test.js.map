{"version":3,"sources":["../src/Radio.test.js"],"names":["describe","it","testClassName","childClassName","first","prop","expect","to","contain","options","label","value","radioFieldset","children","eq","testOptions","find"],"mappings":";;AAAA;;;;AACA;;AACA;;;;;;AAEAA,SAAS,OAAT,EAAkB,YAAM;AACtBC,KAAG,gCAAH,EAAqC,YAAM;AACzC,yBAAQ,8BAAC,eAAD,OAAR;AACD,GAFD;;AAIAA,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAMC,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiB,qBAAQ,8BAAC,eAAD,IAAO,WAAWD,aAAlB,GAAR,EACpBE,KADoB,GAEpBC,IAFoB,CAEf,WAFe,CAAvB;;AAIAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GARD;AASD,CAdD;;AAgBAF,SAAS,gBAAT,EAA2B,YAAM;AAC/B,MAAMS,UAAU,CAAC,EAACC,OAAO,MAAR,EAAgBC,OAAO,GAAvB,EAAD,EAA8B,EAACD,OAAO,OAAR,EAAiBC,OAAO,GAAxB,EAA9B,CAAhB;;AAEAV,KAAG,gCAAH,EAAqC,YAAM;AACzC,yBAAQ,8BAAC,eAAD,CAAO,QAAP,IAAgB,SAASQ,OAAzB,GAAR;AACD,GAFD;;AAIAR,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAMC,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiB,qBACrB,8BAAC,eAAD,CAAO,QAAP,IAAgB,WAAWD,aAA3B,EAA0C,SAASO,OAAnD,GADqB,EAGpBL,KAHoB,GAIpBC,IAJoB,CAIf,WAJe,CAAvB;;AAMAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GAVD;;AAYAD,KAAG,gCAAH,EAAqC,YAAM;AACzC,QAAMW,gBAAgB,qBACpB,8BAAC,eAAD,CAAO,QAAP,IAAgB,OAAM,GAAtB,EAA0B,SAASH,OAAnC,GADoB,CAAtB;;AAIAH,WACEM,cACGC,QADH,GAEGT,KAFH,GAGGC,IAHH,CAGQ,SAHR,CADF,EAKEE,EALF,CAKKO,EALL,CAKQ,IALR;AAMD,GAXD;;AAaAb,KAAG,2BAAH,EAAgC,YAAM;AACpC,QAAMW,gBAAgB,qBACpB,8BAAC,eAAD,CAAO,QAAP,IAAgB,cAAa,GAA7B,EAAiC,SAASH,OAA1C,GADoB,CAAtB;;AAIAH,WACEM,cACGC,QADH,GAEGT,KAFH,GAGGC,IAHH,CAGQ,gBAHR,CADF,EAKEE,EALF,CAKKO,EALL,CAKQ,IALR;AAMD,GAXD;;AAaAb,KAAG,0EAAH,EAA+E,YAAM;AACnF,QAAMU,QAAQ,mBAAd;AACA,QAAMI,cAAc,CAAC,EAACJ,YAAD,EAAD,CAApB;AACA,QAAMC,gBAAgB,mBAAM,8BAAC,eAAD,CAAO,QAAP,IAAgB,SAASG,WAAzB,GAAN,CAAtB;;AAEAT,WAAOM,cAAcI,IAAd,CAAmB,OAAnB,EAA4BX,IAA5B,CAAiC,OAAjC,CAAP,EAAkDE,EAAlD,CAAqDO,EAArD,CAAwDH,KAAxD;AACD,GAND;AAOD,CApDD","file":"Radio.test.js","sourcesContent":["import React from 'react'\nimport {shallow, mount} from 'enzyme'\nimport Radio from './Radio'\n\ndescribe('Radio', () => {\n  it('should render without throwing', () => {\n    shallow(<Radio />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(<Radio className={testClassName} />)\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(testClassName)\n  })\n})\n\ndescribe('Radio.Fieldset', () => {\n  const options = [{label: 'Left', value: 'L'}, {label: 'Right', value: 'R'}]\n\n  it('should render without throwing', () => {\n    shallow(<Radio.Fieldset options={options} />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(\n      <Radio.Fieldset className={testClassName} options={options} />\n    )\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(testClassName)\n  })\n\n  it('can handle the controlled case', () => {\n    const radioFieldset = shallow(\n      <Radio.Fieldset value=\"L\" options={options} />\n    )\n\n    expect(\n      radioFieldset\n        .children()\n        .first()\n        .prop('checked')\n    ).to.eq(true)\n  })\n\n  it('can handle default values', () => {\n    const radioFieldset = shallow(\n      <Radio.Fieldset defaultValue=\"L\" options={options} />\n    )\n\n    expect(\n      radioFieldset\n        .children()\n        .first()\n        .prop('defaultChecked')\n    ).to.eq(true)\n  })\n\n  it('should respect option values even when there is no value or defaultValue', () => {\n    const value = 'OPTION_TEST_VALUE'\n    const testOptions = [{value}]\n    const radioFieldset = mount(<Radio.Fieldset options={testOptions} />)\n\n    expect(radioFieldset.find('input').prop('value')).to.eq(value)\n  })\n})\n"]}