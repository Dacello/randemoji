'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Card = require('../Card');

var _Card2 = _interopRequireDefault(_Card);

var _TimeTicker = require('./TimeTicker');

var _TimeTicker2 = _interopRequireDefault(_TimeTicker);

var _luxon = require('luxon');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx createElement */


/**
 * A component containing the tickers of a time picker.
 */
var TimeContainer = function (_React$Component) {
  _inherits(TimeContainer, _React$Component);

  _createClass(TimeContainer, null, [{
    key: 'defaultProps',

    /**
     * The default values for props of this component
     * @return {object} the default value object
     */
    get: function get() {
      return {
        refocusOnClick: function refocusOnClick() {
          return null;
        },
        updateTime: function updateTime() {
          return null;
        }
      };
    }

    /**
     * Creates a container for the time tickers. Sets state.time to the input's current value
     * @param {object} props the props
     */

  }]);

  function TimeContainer(props) {
    _classCallCheck(this, TimeContainer);

    var _this = _possibleConstructorReturn(this, (TimeContainer.__proto__ || Object.getPrototypeOf(TimeContainer)).call(this, props));

    _this.state = {
      time: _this.getLuxonDateTime(_this.props.selectedTime)
    };
    return _this;
  }

  /**
   * Update state when props change. In particular, if we receive a different
   * `selectedTime` prop from up the hierarchy, set state.time to a new Luxon
   * DateTime appropriately (in order to force the tickers to the new time)
   * @param {*} nextProps the nextProps
   * @return {void}
   */


  _createClass(TimeContainer, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.selectedTime !== this.props.selectedTime) {
        this.setState({ time: this.getLuxonDateTime(nextProps.selectedTime) });
      }
    }

    /**
     * Convert an iso time string to a Luxon DateTime. If iso time is blank / null,
     * or invalid (e.g. 11 : 17), return the local current time instead.
     * @param {string} time - the time to convert, as either an iso time, or a
     *   blank / null
     * @return {object} - the DateTime object
     */

  }, {
    key: 'getLuxonDateTime',
    value: function getLuxonDateTime(time) {
      if (!time) {
        return _luxon.DateTime.local();
      }

      var luxon = _luxon.DateTime.fromISO(time);

      if (luxon.invalid) {
        return _luxon.DateTime.local();
      }

      return luxon;
    }

    /** Get the formatted value of the given unit for the currently selected time
     * @param {string} unit - the unit to be incremented (i.e. hour or minute)
     * @returns {string} formatted value as a string
     */
    /* eslint complexity: [2, 5] */

  }, {
    key: 'getFormattedUnit',
    value: function getFormattedUnit(unit) {
      var value = void 0;

      if (unit === 'hour' && !this.props.use24hr) {
        value = this.state.time[unit] % 12 ? this.state.time[unit] % 12 : 12;
      } else {
        value = this.state.time[unit];
      }

      value = (value < 10 ? '0' : '') + value;
      return value;
    }

    /**
     * Increment the inputted unit by the inputted amount, n
     *
     * This function does not change the time in the input (only container display)
     * @param {int} num - the amount to increment the unit by
     * @param {int} unit - the unit to be incremented (i.e. hour or minute)
     * @param {Event} event - the event that caused this handler to be invoked
     *   (e.g. the click event from the next or previous button on a ticker)
     * @return {void}
     */

  }, {
    key: 'incrementUnit',
    value: function incrementUnit(num, unit, event) {
      event.preventDefault();

      var durationObject = {};

      durationObject[unit] = num;
      var newTime = this.state.time.plus(_luxon.Duration.fromObject(durationObject));

      this.props.updateTime(newTime.toISOTime());

      this.setState({
        time: newTime
      });

      if (this.props.refocusOnClick) {
        this.props.refocusOnClick();
      }
    }
    /* eslint complexity: [2, 6] */

  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          use24hr = _props.use24hr,
          showSeconds = _props.showSeconds,
          overlay = _props.overlay;


      return (0, _react.createElement)(
        'div',
        {
          className: 'rev-TimeContainer ' + (overlay ? 'rev-TimeContainer--overlay' : '') + ' ' + className
        },
        (0, _react.createElement)(
          _Card2.default,
          null,
          (0, _react.createElement)(
            _Card2.default.Header,
            null,
            (0, _react.createElement)(
              'span',
              { className: 'rev-TimeContainer-header' },
              'Time Picker'
            )
          ),
          (0, _react.createElement)(
            _Card2.default.Body,
            null,
            (0, _react.createElement)(_TimeTicker2.default, {
              value: this.getFormattedUnit('hour'),
              onIncrement: this.incrementUnit.bind(this, 1, 'hours'),
              onDecrement: this.incrementUnit.bind(this, -1, 'hours')
            }),
            (0, _react.createElement)(
              'span',
              { className: 'rev-TimeTicker-divider' },
              ':'
            ),
            (0, _react.createElement)(_TimeTicker2.default, {
              value: this.getFormattedUnit('minute'),
              onIncrement: this.incrementUnit.bind(this, 1, 'minutes'),
              onDecrement: this.incrementUnit.bind(this, -1, 'minutes')
            }),
            showSeconds ? (0, _react.createElement)(
              'span',
              { className: 'rev-TimeTicker-divider' },
              ':'
            ) : null,
            showSeconds ? (0, _react.createElement)(_TimeTicker2.default, {
              value: this.getFormattedUnit('second'),
              onIncrement: this.incrementUnit.bind(this, 1, 'seconds'),
              onDecrement: this.incrementUnit.bind(this, -1, 'seconds')
            }) : null,
            use24hr ? null : (0, _react.createElement)(_TimeTicker2.default, {
              value: this.state.time.hour >= 12 ? 'PM' : 'AM',
              onIncrement: this.incrementUnit.bind(this, 12, 'hours'),
              onDecrement: this.incrementUnit.bind(this, -12, 'hours')
            })
          )
        )
      );
    }
  }]);

  return TimeContainer;
}(_react2.default.Component);

exports.default = TimeContainer;
//# sourceMappingURL=TimeContainer.js.map