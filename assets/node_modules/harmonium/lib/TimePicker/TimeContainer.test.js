'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _TimeContainer = require('./TimeContainer');

var _TimeContainer2 = _interopRequireDefault(_TimeContainer);

var _luxon = require('luxon');

var _timekeeper = require('timekeeper');

var _timekeeper2 = _interopRequireDefault(_timekeeper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('TimeContainer', function () {
  it('should render without throwing', function () {
    (0, _enzyme.shallow)(_react2.default.createElement(_TimeContainer2.default, null));
  });

  it('defaults to the current time', function () {
    var container = (0, _enzyme.shallow)(_react2.default.createElement(_TimeContainer2.default, null));

    var testHour = _luxon.DateTime.local().hour % 12;
    var testMinute = _luxon.DateTime.local().minute;
    var testMeridiem = _luxon.DateTime.local().hour >= 12 ? 'PM' : 'AM';
    var testTimeString = testHour + ':' + testMinute + ' ' + testMeridiem;

    var hour = container.state().time.hour % 12;
    var minute = container.state().time.minute;
    var meridiem = container.state().time.hour >= 12 ? 'PM' : 'AM';
    var timeString = hour + ':' + minute + ' ' + meridiem;

    expect(timeString).to.equal(testTimeString);
  });

  it('treats invalid times as the current time', function () {
    var container = (0, _enzyme.shallow)(_react2.default.createElement(_TimeContainer2.default, { selectedTime: '05 : 17' }));

    var testHour = _luxon.DateTime.local().hour % 12;
    var testMinute = _luxon.DateTime.local().minute;
    var testMeridiem = _luxon.DateTime.local().hour >= 12 ? 'PM' : 'AM';
    var testTimeString = testHour + ':' + testMinute + ' ' + testMeridiem;

    var hour = container.state().time.hour % 12;
    var minute = container.state().time.minute;
    var meridiem = container.state().time.hour >= 12 ? 'PM' : 'AM';
    var timeString = hour + ':' + minute + ' ' + meridiem;

    expect(timeString).to.equal(testTimeString);
  });

  it('can advance an hour backward', function () {
    var container = (0, _enzyme.mount)(_react2.default.createElement(_TimeContainer2.default, null));

    container.find('button.rev-TimeTicker-button--previous').first().simulate('click', { preventDefault: function preventDefault() {
        return null;
      } });
    var testTime = _luxon.DateTime.local().minus(_luxon.Duration.fromObject({ hours: 1 }));
    var testHour = (testTime.hour % 12 ? testTime.hour % 12 : 12).toString();
    // cast time text to number to unformat 0 in front of single digits so that test passes for single digits
    var hour = (+container.find('.rev-TimeTicker-value').first().text()).toString();

    expect(hour).to.equal(testHour);
  });

  it('can advance an hour forward', function () {
    var container = (0, _enzyme.mount)(_react2.default.createElement(_TimeContainer2.default, null));

    container.find('button.rev-TimeTicker-button--next').first().simulate('click', { preventDefault: function preventDefault() {
        return null;
      } });
    var testTime = _luxon.DateTime.local().plus(_luxon.Duration.fromObject({ hours: 1 }));
    var testHour = (testTime.hour % 12 ? testTime.hour % 12 : 12).toString();
    // cast time text to number to unformat 0 in front of single digits so that test passes for single digits
    var hour = (+container.find('.rev-TimeTicker-value').first().text()).toString();

    expect(hour).to.equal(testHour);
  });

  it('can advance a minute backward', function () {
    var container = (0, _enzyme.mount)(_react2.default.createElement(_TimeContainer2.default, null));

    container.find('button.rev-TimeTicker-button--previous').at(1).simulate('click', { preventDefault: function preventDefault() {
        return null;
      } });
    var testTime = _luxon.DateTime.local().minus(_luxon.Duration.fromObject({ minutes: 1 }));
    var testMinute = testTime.minute.toString();
    // cast time text to number to unformat 0 in front of single digits so that test passes for single digits
    var minute = (+container.find('.rev-TimeTicker-value').at(1).text()).toString();

    expect(minute).to.equal(testMinute);
  });

  it('can advance a minute forward', function () {
    var container = (0, _enzyme.mount)(_react2.default.createElement(_TimeContainer2.default, null));

    container.find('button.rev-TimeTicker-button--next').at(1).simulate('click', { preventDefault: function preventDefault() {
        return null;
      } });
    var testTime = _luxon.DateTime.local().plus(_luxon.Duration.fromObject({ minutes: 1 }));
    var testMinute = testTime.minute.toString();
    // cast time text to number to unformat 0 in front of single digits so that test passes for single digits
    var minute = (+container.find('.rev-TimeTicker-value').at(1).text()).toString();

    expect(minute).to.equal(testMinute);
  });

  it('can advance a second backward', function () {
    var container = (0, _enzyme.mount)(_react2.default.createElement(_TimeContainer2.default, { showSeconds: true }));

    container.find('button.rev-TimeTicker-button--previous').at(2).simulate('click', { preventDefault: function preventDefault() {
        return null;
      } });
    var testTime = _luxon.DateTime.local().minus(_luxon.Duration.fromObject({ seconds: 1 }));
    var testSecond = testTime.second.toString();
    // cast time text to number to unformat 0 in front of single digits so that test passes for single digits
    var second = (+container.find('.rev-TimeTicker-value').at(2).text()).toString();

    expect(second).to.equal(testSecond);
  });

  it('can advance a second forward', function () {
    _timekeeper2.default.freeze(new Date());
    var testTime = _luxon.DateTime.local().plus(_luxon.Duration.fromObject({ seconds: 1 }));
    var testSecond = testTime.second.toString();
    var container = (0, _enzyme.mount)(_react2.default.createElement(_TimeContainer2.default, { showSeconds: true }));

    container.find('button.rev-TimeTicker-button--next').at(2).simulate('click', { preventDefault: function preventDefault() {
        return null;
      } });

    // cast time text to number to unformat 0 in front of single digits so that test passes for single digits
    var second = (+container.find('.rev-TimeTicker-value').at(2).text()).toString();

    _timekeeper2.default.reset();

    expect(second).to.equal(testSecond);
  });

  it('can advance AM/PM backward', function () {
    var container = (0, _enzyme.mount)(_react2.default.createElement(_TimeContainer2.default, null));

    container.find('button.rev-TimeTicker-button--previous').last().simulate('click', { preventDefault: function preventDefault() {
        return null;
      } });
    var testTime = _luxon.DateTime.local().minus(_luxon.Duration.fromObject({ hour: 12 }));
    var testMeridiem = testTime.hour >= 12 ? 'PM' : 'AM';
    var meridiem = container.find('.rev-TimeTicker-value').last().text();

    expect(meridiem).to.equal(testMeridiem);
  });

  it('can advance AM/PM forward', function () {
    var container = (0, _enzyme.mount)(_react2.default.createElement(_TimeContainer2.default, null));

    container.find('button.rev-TimeTicker-button--next').last().simulate('click', { preventDefault: function preventDefault() {
        return null;
      } });
    var testTime = _luxon.DateTime.local().plus(_luxon.Duration.fromObject({ hour: 12 }));
    var testMeridiem = testTime.hour >= 12 ? 'PM' : 'AM';
    var meridiem = container.find('.rev-TimeTicker-value').last().text();

    expect(meridiem).to.equal(testMeridiem);
  });
});
//# sourceMappingURL=TimeContainer.test.js.map