{"version":3,"sources":["../../src/TimePicker/TimeContainer.js"],"names":["TimeContainer","refocusOnClick","updateTime","props","state","time","getLuxonDateTime","selectedTime","nextProps","setState","DateTime","local","luxon","fromISO","invalid","unit","value","use24hr","num","event","preventDefault","durationObject","newTime","plus","Duration","fromObject","toISOTime","className","showSeconds","overlay","getFormattedUnit","incrementUnit","bind","hour","React","Component"],"mappings":"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","file":"TimeContainer.js","sourcesContent":["/** @jsx createElement */\nimport React, {createElement} from 'react'\nimport Card from '../Card'\nimport TimeTicker from './TimeTicker'\nimport {DateTime, Duration} from 'luxon'\n\n/**\n * A component containing the tickers of a time picker.\n */\nexport default class TimeContainer extends React.Component {\n  /**\n   * The default values for props of this component\n   * @return {object} the default value object\n   */\n  static get defaultProps() {\n    return {\n      refocusOnClick: () => null,\n      updateTime: () => null,\n    }\n  }\n\n  /**\n   * Creates a container for the time tickers. Sets state.time to the input's current value\n   * @param {object} props the props\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      time: this.getLuxonDateTime(this.props.selectedTime),\n    }\n  }\n\n  /**\n   * Update state when props change. In particular, if we receive a different\n   * `selectedTime` prop from up the hierarchy, set state.time to a new Luxon\n   * DateTime appropriately (in order to force the tickers to the new time)\n   * @param {*} nextProps the nextProps\n   * @return {void}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.selectedTime !== this.props.selectedTime) {\n      this.setState({time: this.getLuxonDateTime(nextProps.selectedTime)})\n    }\n  }\n\n  /**\n   * Convert an iso time string to a Luxon DateTime. If iso time is blank / null,\n   * or invalid (e.g. 11 : 17), return the local current time instead.\n   * @param {string} time - the time to convert, as either an iso time, or a\n   *   blank / null\n   * @return {object} - the DateTime object\n   */\n  getLuxonDateTime(time) {\n    if (!time) {\n      return DateTime.local()\n    }\n\n    const luxon = DateTime.fromISO(time)\n\n    if (luxon.invalid) {\n      return DateTime.local()\n    }\n\n    return luxon\n  }\n\n  /** Get the formatted value of the given unit for the currently selected time\n   * @param {string} unit - the unit to be incremented (i.e. hour or minute)\n   * @returns {string} formatted value as a string\n   */\n  /* eslint complexity: [2, 5] */\n  getFormattedUnit(unit) {\n    let value\n\n    if (unit === 'hour' && !this.props.use24hr) {\n      value = this.state.time[unit] % 12 ? this.state.time[unit] % 12 : 12\n    } else {\n      value = this.state.time[unit]\n    }\n\n    value = (value < 10 ? '0' : '') + value\n    return value\n  }\n\n  /**\n   * Increment the inputted unit by the inputted amount, n\n   *\n   * This function does not change the time in the input (only container display)\n   * @param {int} num - the amount to increment the unit by\n   * @param {int} unit - the unit to be incremented (i.e. hour or minute)\n   * @param {Event} event - the event that caused this handler to be invoked\n   *   (e.g. the click event from the next or previous button on a ticker)\n   * @return {void}\n   */\n  incrementUnit(num, unit, event) {\n    event.preventDefault()\n\n    const durationObject = {}\n\n    durationObject[unit] = num\n    const newTime = this.state.time.plus(Duration.fromObject(durationObject))\n\n    this.props.updateTime(newTime.toISOTime())\n\n    this.setState({\n      time: newTime,\n    })\n\n    if (this.props.refocusOnClick) {\n      this.props.refocusOnClick()\n    }\n  }\n  /* eslint complexity: [2, 6] */\n  render() {\n    const {className, use24hr, showSeconds, overlay} = this.props\n\n    return (\n      <div\n        className={`rev-TimeContainer ${\n          overlay ? 'rev-TimeContainer--overlay' : ''\n        } ${className}`}\n      >\n        <Card>\n          <Card.Header>\n            <span className=\"rev-TimeContainer-header\">Time Picker</span>\n          </Card.Header>\n          <Card.Body>\n            <TimeTicker\n              value={this.getFormattedUnit('hour')}\n              onIncrement={this.incrementUnit.bind(this, 1, 'hours')}\n              onDecrement={this.incrementUnit.bind(this, -1, 'hours')}\n            />\n            <span className=\"rev-TimeTicker-divider\">:</span>\n            <TimeTicker\n              value={this.getFormattedUnit('minute')}\n              onIncrement={this.incrementUnit.bind(this, 1, 'minutes')}\n              onDecrement={this.incrementUnit.bind(this, -1, 'minutes')}\n            />\n            {showSeconds ? (\n              <span className=\"rev-TimeTicker-divider\">:</span>\n            ) : null}\n            {showSeconds ? (\n              <TimeTicker\n                value={this.getFormattedUnit('second')}\n                onIncrement={this.incrementUnit.bind(this, 1, 'seconds')}\n                onDecrement={this.incrementUnit.bind(this, -1, 'seconds')}\n              />\n            ) : null}\n            {use24hr ? null : (\n              <TimeTicker\n                value={this.state.time.hour >= 12 ? 'PM' : 'AM'}\n                onIncrement={this.incrementUnit.bind(this, 12, 'hours')}\n                onDecrement={this.incrementUnit.bind(this, -12, 'hours')}\n              />\n            )}\n          </Card.Body>\n        </Card>\n      </div>\n    )\n  }\n}\n"]}