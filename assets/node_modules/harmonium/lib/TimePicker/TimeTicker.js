'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx createElement */


/**
 * A component which increments or decrements a unit of time,
 * e.g. (01-12 for hours, 00-59 for minutes, and AM/PM)
 * @param {object} props - the props of the TimeTicker
 */

// TODO: Generalize this to a general incrementor/decrementor
// component that can cycle through a range of numbers or an enum

var TimeTicker = function (_Component) {
  _inherits(TimeTicker, _Component);

  function TimeTicker() {
    _classCallCheck(this, TimeTicker);

    return _possibleConstructorReturn(this, (TimeTicker.__proto__ || Object.getPrototypeOf(TimeTicker)).apply(this, arguments));
  }

  _createClass(TimeTicker, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          previousLabel = _props.previousLabel,
          nextLabel = _props.nextLabel,
          value = _props.value,
          onIncrement = _props.onIncrement,
          onDecrement = _props.onDecrement,
          props = _objectWithoutProperties(_props, ['className', 'previousLabel', 'nextLabel', 'value', 'onIncrement', 'onDecrement']);

      return (0, _react.createElement)(
        'div',
        _extends({}, props, { className: 'rev-TimeTicker ' + className }),
        (0, _react.createElement)(
          _Button2.default,
          {
            onClick: onIncrement,
            className: 'rev-TimeTicker-button rev-TimeTicker-button--next'
          },
          nextLabel
        ),
        (0, _react.createElement)(
          'div',
          { className: 'rev-TimeTicker-value' },
          value
        ),
        (0, _react.createElement)(
          _Button2.default,
          {
            onClick: onDecrement,
            className: 'rev-TimeTicker-button rev-TimeTicker-button--previous'
          },
          previousLabel
        )
      );
    }
  }]);

  return TimeTicker;
}(_react.Component);

TimeTicker.propTypes = {
  previousLabel: _propTypes2.default.node,
  nextLabel: _propTypes2.default.node,
  value: _propTypes2.default.any,
  onIncrement: _propTypes2.default.func,
  onDecrement: _propTypes2.default.func,
  refocusOnClick: _propTypes2.default.bool,
  className: _propTypes2.default.string
};
TimeTicker.defaultProps = {
  previousLabel: (0, _react.createElement)(
    'span',
    null,
    '\u02C5'
  ),
  nextLabel: (0, _react.createElement)(
    'span',
    null,
    '\u02C4'
  )
};
exports.default = TimeTicker;
//# sourceMappingURL=TimeTicker.js.map