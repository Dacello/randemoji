{"version":3,"sources":["../src/Loader.test.js"],"names":["props","describe","it","expect","not","to","throw","wrapper","hasClass","equal","style","animationDuration","borderTopColor","borderColor","customProps","small","medium"],"mappings":";;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,QAAQ,EAAd;;AAEAC,SAAS,QAAT,EAAmB,YAAM;AACvBC,KAAG,sCAAH,EAA2C,YAAM;AAC/CC,WAAO;AAAA,aAAM,qBAAQ,8BAAC,gBAAD,EAAYH,KAAZ,CAAR,CAAN;AAAA,KAAP,EAA6CI,GAA7C,CAAiDC,EAAjD,CAAoDC,KAApD;AACD,GAFD;;AAIAJ,KAAG,8BAAH,EAAmC,YAAM;AACvCC,WAAO;AAAA,aAAM,mBAAM,8BAAC,gBAAD,EAAYH,KAAZ,CAAN,CAAN;AAAA,KAAP,EAA2CI,GAA3C,CAA+CC,EAA/C,CAAkDC,KAAlD;AACD,GAFD;;AAIAJ,KAAG,gEAAH,EAAqE,YAAM;AACzE,QAAMK,UAAU,qBAAQ,8BAAC,gBAAD,IAAQ,WAAR,GAAR,CAAhB;;AAEAJ,WAAOI,QAAQC,QAAR,CAAiB,mBAAjB,CAAP,EAA8CH,EAA9C,CAAiDI,KAAjD,CAAuD,IAAvD;AACD,GAJD;;AAMAP,KAAG,kEAAH,EAAuE,YAAM;AAC3E,QAAMK,UAAU,qBAAQ,8BAAC,gBAAD,IAAQ,YAAR,GAAR,CAAhB;;AAEAJ,WAAOI,QAAQC,QAAR,CAAiB,oBAAjB,CAAP,EAA+CH,EAA/C,CAAkDI,KAAlD,CAAwD,IAAxD;AACD,GAJD;;AAMAP,KAAG,gEAAH,EAAqE,YAAM;AACzE,QAAMK,UAAU,qBAAQ,8BAAC,gBAAD,IAAQ,WAAR,GAAR,CAAhB;;AAEAJ,WAAOI,QAAQC,QAAR,CAAiB,mBAAjB,CAAP,EAA8CH,EAA9C,CAAiDI,KAAjD,CAAuD,IAAvD;AACD,GAJD;;AAMAP,KAAG,8DAAH,EAAmE,YAAM;AACvE,QAAMK,UAAU,qBAAQ,8BAAC,gBAAD,IAAQ,UAAR,GAAR,CAAhB;;AAEAJ,WAAOI,QAAQC,QAAR,CAAiB,kBAAjB,CAAP,EAA6CH,EAA7C,CAAgDI,KAAhD,CAAsD,IAAtD;AACD,GAJD;;AAMAP,KAAG,6EAAH,EAAkF,YAAM;AACtF,QAAMK,UAAU,qBAAQ,8BAAC,gBAAD,IAAQ,UAAS,OAAjB,GAAR,CAAhB;;AAEAJ,WAAOI,QAAQP,KAAR,GAAgBU,KAAhB,CAAsBC,iBAA7B,EAAgDN,EAAhD,CAAmDI,KAAnD,CAAyD,OAAzD;AACD,GAJD;;AAMAP,KAAG,wEAAH,EAA6E,YAAM;AACjF,QAAMK,UAAU,qBAAQ,8BAAC,gBAAD,IAAQ,OAAM,SAAd,GAAR,CAAhB;;AAEAJ,WAAOI,QAAQP,KAAR,GAAgBU,KAAhB,CAAsBE,cAA7B,EAA6CP,EAA7C,CAAgDI,KAAhD,CAAsD,SAAtD;AACD,GAJD;;AAMAP,KAAG,6EAAH,EAAkF,YAAM;AACtF,QAAMK,UAAU,qBAAQ,8BAAC,gBAAD,IAAQ,gBAAe,SAAvB,GAAR,CAAhB;;AAEAJ,WAAOI,QAAQP,KAAR,GAAgBU,KAAhB,CAAsBG,WAA7B,EAA0CR,EAA1C,CAA6CI,KAA7C,CAAmD,SAAnD;AACD,GAJD;;AAMAP,KAAG,iEAAH,EAAsE,YAAM;AAC1E;AACA,QAAMY,2BAAkBd,KAAlB,IAAyBe,OAAO,IAAhC,EAAsCC,QAAQ,IAA9C,GAAN;;AAEAb,WAAO;AAAA,aAAM,qBAAQ,8BAAC,gBAAD,EAAYW,WAAZ,CAAR,CAAN;AAAA,KAAP,EAAmDT,EAAnD,CAAsDC,KAAtD;AACD,GALD;AAMD,CAzDD","file":"Loader.test.js","sourcesContent":["import React from 'react'\nimport {shallow, mount} from 'enzyme'\nimport Loader from './Loader'\n\nconst props = {}\n\ndescribe('Loader', () => {\n  it('will shallow render without throwing', () => {\n    expect(() => shallow(<Loader {...props} />)).not.to.throw()\n  })\n\n  it('will render without throwing', () => {\n    expect(() => mount(<Loader {...props} />)).not.to.throw()\n  })\n\n  it('renders a small variation if prop \"small\" is specified as true', () => {\n    const wrapper = shallow(<Loader small />)\n\n    expect(wrapper.hasClass('rev-Loader--small')).to.equal(true)\n  })\n\n  it('renders a medium variation if prop \"medium\" is specified as true', () => {\n    const wrapper = shallow(<Loader medium />)\n\n    expect(wrapper.hasClass('rev-Loader--medium')).to.equal(true)\n  })\n\n  it('renders a large variation if prop \"large\" is specified as true', () => {\n    const wrapper = shallow(<Loader large />)\n\n    expect(wrapper.hasClass('rev-Loader--large')).to.equal(true)\n  })\n\n  it('renders a huge variation if prop \"huge\" is specified as true', () => {\n    const wrapper = shallow(<Loader huge />)\n\n    expect(wrapper.hasClass('rev-Loader--huge')).to.equal(true)\n  })\n\n  it('assigns a variation on animation-duration when prop \"duration\" is specified', () => {\n    const wrapper = shallow(<Loader duration=\"600ms\" />)\n\n    expect(wrapper.props().style.animationDuration).to.equal('600ms')\n  })\n\n  it('assigns a variation on border-top-color when prop \"color\" is specified', () => {\n    const wrapper = shallow(<Loader color=\"#000000\" />)\n\n    expect(wrapper.props().style.borderTopColor).to.equal('#000000')\n  })\n\n  it('assigns a variation on border-color when prop \"secondaryColor\" is specified', () => {\n    const wrapper = shallow(<Loader secondaryColor=\"#FFFFFF\" />)\n\n    expect(wrapper.props().style.borderColor).to.equal('#FFFFFF')\n  })\n\n  it('throws an error if more than one size-related prop is specified', () => {\n    // Construct props wherein more than one size attribute is specified.\n    const customProps = {...props, small: true, medium: true}\n\n    expect(() => shallow(<Loader {...customProps} />)).to.throw()\n  })\n})\n"]}