{"version":3,"sources":["../src/Brand.test.js"],"names":["props","describe","it","expect","not","to","throw","path","brand","find","getElement","src","equal","altText","alt","link","href"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,QAAQ,EAAd;;AAEAC,SAAS,OAAT,EAAkB,YAAM;AACtBC,KAAG,gCAAH,EAAqC,YAAM;AACzCC,WAAO;AAAA,aAAM,qBAAQ,8BAAC,eAAD,EAAWH,KAAX,CAAR,CAAN;AAAA,KAAP,EAA4CI,GAA5C,CAAgDC,EAAhD,CAAmDC,KAAnD;AACD,GAFD;;AAIAJ,KAAG,qDAAH,EAA0D,YAAM;AAC9D,QAAMK,OAAO,eAAb;AACA,QAAMC,QAAQ,qBAAQ,8BAAC,eAAD,IAAO,WAAWD,IAAlB,GAAR,CAAd;;AAEAJ,WAAOK,MAAMC,IAAN,CAAW,KAAX,EAAkBC,UAAlB,GAA+BV,KAA/B,CAAqCW,GAA5C,EAAiDN,EAAjD,CAAoDO,KAApD,CAA0DL,IAA1D;AACD,GALD;;AAOAL,KAAG,+CAAH,EAAoD,YAAM;AACxD,QAAMW,UAAU,oBAAhB;AACA,QAAML,QAAQ,qBAAQ,8BAAC,eAAD,IAAO,QAAQK,OAAf,GAAR,CAAd;;AAEAV,WAAOK,MAAMC,IAAN,CAAW,KAAX,EAAkBC,UAAlB,GAA+BV,KAA/B,CAAqCc,GAA5C,EAAiDT,EAAjD,CAAoDO,KAApD,CAA0DC,OAA1D;AACD,GALD;;AAOAX,KAAG,2CAAH,EAAgD,YAAM;AACpD,QAAMa,OAAO,oBAAb;AACA,QAAMP,QAAQ,qBAAQ,8BAAC,eAAD,IAAO,UAAUO,IAAjB,GAAR,CAAd;;AAEAZ,WAAOK,MAAMC,IAAN,CAAW,GAAX,EAAgBC,UAAhB,GAA6BV,KAA7B,CAAmCgB,IAA1C,EAAgDX,EAAhD,CAAmDO,KAAnD,CAAyDG,IAAzD;AACD,GALD;AAMD,CAzBD","file":"Brand.test.js","sourcesContent":["import Brand from './Brand'\nimport React from 'react'\nimport {shallow} from 'enzyme'\n\nconst props = {}\n\ndescribe('Brand', () => {\n  it('should render without throwing', () => {\n    expect(() => shallow(<Brand {...props} />)).not.to.throw()\n  })\n\n  it('should set the \"src\" attribute on the image element', () => {\n    const path = 'path/to/image'\n    const brand = shallow(<Brand imagePath={path} />)\n\n    expect(brand.find('img').getElement().props.src).to.equal(path)\n  })\n\n  it('should set the \"alt\" tag on the image element', () => {\n    const altText = 'screen reader text'\n    const brand = shallow(<Brand altTag={altText} />)\n\n    expect(brand.find('img').getElement().props.alt).to.equal(altText)\n  })\n\n  it('should set the link on the anchor element', () => {\n    const link = '/some/example/link'\n    const brand = shallow(<Brand linkPath={link} />)\n\n    expect(brand.find('a').getElement().props.href).to.equal(link)\n  })\n})\n"]}