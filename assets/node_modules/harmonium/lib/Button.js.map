{"version":3,"sources":["../src/Button.js"],"names":["BOOL_PROPS_TO_CLASS_NAMES","small","large","primary","secondary","inverted","success","warning","alert","disabled","expanded","dropdown","BOOL_PROPS","Object","keys","Button","props","className","children","tag","icon","boolClassNames","forEach","name","push","includes","href","buttonClassName","component","newChildren","Children","toArray","Component","propTypes","PropTypes","string","node"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,4BAA4B;AAChCC,SAAO,CAAC,mBAAD,CADyB;AAEhCC,SAAO,CAAC,mBAAD,CAFyB;;AAIhCC,WAAS,CAAC,qBAAD,CAJuB;AAKhCC,aAAW,CAAC,uBAAD,CALqB;AAMhCC,YAAU,CAAC,sBAAD,CANsB;;AAQhCC,WAAS,CAAC,qBAAD,CARuB;AAShCC,WAAS,CAAC,qBAAD,CATuB;AAUhCC,SAAO,CAAC,mBAAD,CAVyB;AAWhCC,YAAU,CAAC,sBAAD,CAXsB;;AAahCC,YAAU,CAAC,sBAAD,CAbsB;;AAehCC,YAAU,CAAC,sBAAD;AAfsB,CAAlC;AAiBA,IAAMC,aAAaC,OAAOC,IAAP,CAAYd,yBAAZ,CAAnB;;IAEqBe,M;;;;;;;;;;;;AAOnB;6BACS;AACP;AADO,mBAE4C,KAAKC,KAFjD;AAAA,UAEAC,SAFA,UAEAA,SAFA;AAAA,UAEWC,QAFX,UAEWA,QAFX;AAAA,UAEqBC,GAFrB,UAEqBA,GAFrB;AAAA,UAE0BC,IAF1B,UAE0BA,IAF1B;AAAA,UAEmCJ,KAFnC;;AAIP;;;AACA,UAAMK,iBAAiB,EAAvB;;AAEAT,iBAAWU,OAAX,CAAmB,UAACC,IAAD,EAAU;AAC3B,YAAIP,MAAMO,IAAN,CAAJ,EAAiB;AACfF,yBAAeG,IAAf,CAAoBxB,0BAA0BuB,IAA1B,CAApB;AACD;AACD;AACA,YAAI,CAAC,CAAC,UAAD,EAAaE,QAAb,CAAsBF,IAAtB,CAAL,EAAkC;AAChC,iBAAOP,MAAMO,IAAN,CAAP;AACD;AACF,OARD;;AAUA;AAjBO,UAkBAd,QAlBA,GAkBkBO,KAlBlB,CAkBAP,QAlBA;AAAA,UAkBUiB,IAlBV,GAkBkBV,KAlBlB,CAkBUU,IAlBV;;AAoBP;;AACA,UAAMC,kBAAkB,0BACtBV,SADsB,EAEtB,YAFsB,EAGtBI,cAHsB,EAItB;AACEZ;AADF,OAJsB,CAAxB;;AASA;AACA,UAAMmB,YAAYT,QAAQO,OAAO,GAAP,GAAa,QAArB,CAAlB;;AAEA;AACA,UAAIG,cAAcX,QAAlB;;AAEA,UAAIE,IAAJ,EAAU;AACRS,uBACE,8BAAC,cAAD,IAAM,WAAU,iBAAhB,EAAkC,KAAI,MAAtC,EAA6C,GAAGT,IAAhD,GADF,EAEE,GAFF,4BAGKU,gBAASC,OAAT,CAAiBb,QAAjB,CAHL;AAKD;;AAED;AACA,aAAO,0BACLU,SADK,eAEDZ,KAFC,IAEMC,WAAWU,eAFjB,KAGLE,WAHK,CAAP;AAKD;;;;EA1DiCG,gB;;AAAfjB,M,CACZkB,S,GAAY;AACjBd,OAAKe,oBAAUC,MADE;AAEjBf,QAAMc,oBAAUC,MAFC;AAGjBlB,aAAWiB,oBAAUC,MAHJ;AAIjBjB,YAAUgB,oBAAUE,IAJH,E;kBADArB,M","file":"Button.js","sourcesContent":["import React, {Component, Children, createElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport Icon from './Icon'\n\nconst BOOL_PROPS_TO_CLASS_NAMES = {\n  small: ['rev-Button--small'],\n  large: ['rev-Button--large'],\n\n  primary: ['rev-Button--primary'],\n  secondary: ['rev-Button--secondary'],\n  inverted: ['rev-Button--inverted'],\n\n  success: ['rev-Button--success'],\n  warning: ['rev-Button--warning'],\n  alert: ['rev-Button--alert'],\n  disabled: ['rev-Button--disabled'],\n\n  expanded: ['rev-Button--expanded'],\n\n  dropdown: ['rev-Button--dropdown'],\n}\nconst BOOL_PROPS = Object.keys(BOOL_PROPS_TO_CLASS_NAMES)\n\nexport default class Button extends Component {\n  static propTypes = {\n    tag: PropTypes.string,\n    icon: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.node,\n  }\n  /* eslint complexity: [2, 4] */\n  render() {\n    // Extract props that will not pass through.\n    const {className, children, tag, icon, ...props} = this.props\n\n    // Start building the className\n    const boolClassNames = []\n\n    BOOL_PROPS.forEach((name) => {\n      if (props[name]) {\n        boolClassNames.push(BOOL_PROPS_TO_CLASS_NAMES[name])\n      }\n      // Don't delete classname props if they also need to pass through.\n      if (!['disabled'].includes(name)) {\n        delete props[name]\n      }\n    })\n\n    // Of the props that WILL pass through, we need to use these.\n    const {disabled, href} = props\n\n    // Finish building the classNAme\n    const buttonClassName = classNames(\n      className,\n      'rev-Button',\n      boolClassNames,\n      {\n        disabled,\n      }\n    )\n\n    // Modify underlying tag to suit props.\n    const component = tag || (href ? 'a' : 'button')\n\n    // Prepend icon if available\n    let newChildren = children\n\n    if (icon) {\n      newChildren = [\n        <Icon className=\"rev-Button-icon\" key=\"icon\" i={icon} />,\n        ' ',\n        ...Children.toArray(children),\n      ]\n    }\n\n    // Finish\n    return createElement(\n      component,\n      {...props, className: buttonClassName},\n      newChildren\n    )\n  }\n}\n"]}