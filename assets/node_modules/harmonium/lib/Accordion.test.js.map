{"version":3,"sources":["../src/Accordion.test.js"],"names":["describe","it","inherentClassName","testClassName","childClassName","first","prop","expect","to","contain","childProp","children","eq","forEach","item","component","text","include","instance","toggleActiveStatus","setExclusivelyActive","spy","sinon","child","find","Accordion","Item","fakeEvent","preventDefault","props","onClick","update","state","called"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEAA,SAAS,WAAT,EAAsB,YAAM;AAC1BC,KAAG,gCAAH,EAAqC,YAAM;AACzC,yBACE;AAAC,yBAAD;AAAA;AACE,oCAAC,mBAAD,CAAW,IAAX,IAAgB,YAAY,CAA5B,EAA+B,OAAM,KAArC;AADF,KADF;AAKD,GAND;;AAQAA,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAMC,oBAAoB,eAA1B;AACA,QAAMC,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiB,qBACrB;AAAC,yBAAD;AAAA,QAAW,WAAWD,aAAtB;AACE,oCAAC,mBAAD,CAAW,IAAX,IAAgB,YAAY,CAA5B,EAA+B,OAAM,KAArC;AADF,KADqB,EAKpBE,KALoB,GAMpBC,IANoB,CAMf,WANe,CAAvB;;AAQAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCP,iBAAlC;AACAK,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GAdD;;AAgBAF,KAAG,mCAAH,EAAwC,YAAM;AAC5C,QAAMS,YAAY,qBAChB;AAAC,yBAAD;AAAA,QAAW,QAAQ,CAAnB;AACE,oCAAC,mBAAD,CAAW,IAAX,IAAgB,YAAY,CAA5B,EAA+B,OAAM,KAArC;AADF,KADgB,EAKfC,QALe,GAMfN,KANe,GAOfC,IAPe,CAOV,QAPU,CAAlB;;AASAC,WAAOG,SAAP,EAAkBF,EAAlB,CAAqBI,EAArB,CAAwB,IAAxB;AACD,GAXD;;AAaAX,KAAG,kDAAH,EAAuD,YAAM;AAC3D,yBACE;AAAC,yBAAD;AAAA,QAAW,QAAQ,CAAC,CAAD,EAAI,CAAJ,CAAnB;AACE,oCAAC,mBAAD,CAAW,IAAX,IAAgB,YAAY,CAA5B,EAA+B,OAAM,KAArC,GADF;AAEE,oCAAC,mBAAD,CAAW,IAAX,IAAgB,YAAY,CAA5B,EAA+B,OAAM,KAArC;AAFF,KADF,EAMGU,QANH,GAOGE,OAPH,CAOW,UAACC,IAAD,EAAU;AACjB,UAAMJ,YAAYI,KAAKR,IAAL,CAAU,QAAV,CAAlB;;AAEAC,aAAOG,SAAP,EAAkBF,EAAlB,CAAqBI,EAArB,CAAwB,IAAxB;AACD,KAXH;AAYD,GAbD;;AAeAX,KAAG,sDAAH,EAA2D,YAAM;AAC/D,QAAMc,YAAY,mBAChB;AAAC,yBAAD;AAAA,QAAW,QAAQ,EAAC,GAAG,IAAJ,EAAU,GAAG,IAAb,EAAnB;AACE;AAAC,2BAAD,CAAW,IAAX;AAAA,UAAgB,YAAY,CAA5B,EAA+B,OAAM,KAArC;AAAA;AAAA,OADF;AAIE;AAAC,2BAAD,CAAW,IAAX;AAAA,UAAgB,YAAY,CAA5B,EAA+B,OAAM,KAArC;AAAA;AAAA;AAJF,KADgB,CAAlB;;AAWAR,WAAOQ,UAAUC,IAAV,EAAP,EAAyBR,EAAzB,CAA4BS,OAA5B,CAAoC,OAApC;AACAV,WAAOQ,UAAUC,IAAV,EAAP,EAAyBR,EAAzB,CAA4BS,OAA5B,CAAoC,QAApC;AACD,GAdD;AAeD,CApED;;AAsEAjB,SAAS,oBAAT,EAA+B,YAAM;AACnCC,KAAG,gCAAH,EAAqC,YAAM;AACzC,QAAMc,YAAY,mBAChB;AAAC,yBAAD,CAAW,QAAX;AAAA;AACE,oCAAC,mBAAD,CAAW,IAAX,IAAgB,YAAY,CAA5B,EAA+B,OAAM,KAArC;AADF,KADgB,CAAlB;AAKA,QAAMG,WAAWH,UAAUG,QAAV,EAAjB;;AAEAA,aAASC,kBAAT,CAA4B,CAA5B;AACAD,aAASE,oBAAT,CAA8B,CAA9B;AACAF,aAASC,kBAAT,CAA4B,CAA5B;AACAD,aAASC,kBAAT,CAA4B,CAA5B;AACAD,aAASC,kBAAT,CAA4B,CAA5B;AACAD,aAASE,oBAAT,CAA8B,CAA9B;AACAF,aAASE,oBAAT,CAA8B,CAA9B;AACD,GAfD;;AAiBAnB,KAAG,mBAAH,EAAwB,YAAM;AAC5B,QAAMoB,MAAMC,gBAAMD,GAAN,EAAZ;AACA,QAAMN,YAAY,mBAChB;AAAC,yBAAD,CAAW,QAAX;AAAA;AACE,oCAAC,mBAAD,CAAW,IAAX,IAAgB,YAAY,CAA5B,EAA+B,OAAM,KAArC,EAA2C,SAASM,GAApD;AADF,KADgB,CAAlB;AAKA,QAAME,QAAQR,UAAUS,IAAV,CAAeC,oBAAUC,IAAzB,EAA+BR,QAA/B,EAAd;AACA,QAAMS,YAAY,EAACC,gBAAgB;AAAA,eAAM,IAAN;AAAA,OAAjB,EAAlB;;AAEAL,UAAMM,KAAN,CAAYC,OAAZ,CAAoBH,SAApB;;AAEApB,WAAOQ,UAAUgB,MAAV,GAAmBC,KAAnB,CAAyB,QAAzB,EAAmC,GAAnC,CAAP,EAAgDxB,EAAhD,CAAmDI,EAAnD,CAAsD,IAAtD;AACAL,WAAOc,IAAIY,MAAX,EAAmBzB,EAAnB,CAAsBI,EAAtB,CAAyB,IAAzB;AACD,GAdD;AAeD,CAjCD","file":"Accordion.test.js","sourcesContent":["import React from 'react'\nimport sinon from 'sinon'\nimport {shallow, mount} from 'enzyme'\nimport Accordion from './Accordion'\n\ndescribe('Accordion', () => {\n  it('should render without throwing', () => {\n    shallow(\n      <Accordion>\n        <Accordion.Item contentKey={1} title=\"One\" />\n      </Accordion>\n    )\n  })\n\n  it('should add className to child', () => {\n    const inherentClassName = 'rev-Accordion'\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(\n      <Accordion className={testClassName}>\n        <Accordion.Item contentKey={1} title=\"One\" />\n      </Accordion>\n    )\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(inherentClassName)\n    expect(childClassName).to.contain(testClassName)\n  })\n\n  it('should handle single active items', () => {\n    const childProp = shallow(\n      <Accordion active={1}>\n        <Accordion.Item contentKey={1} title=\"One\" />\n      </Accordion>\n    )\n      .children()\n      .first()\n      .prop('active')\n\n    expect(childProp).to.eq(true)\n  })\n\n  it('should handle multiple active items (with array)', () => {\n    shallow(\n      <Accordion active={[1, 2]}>\n        <Accordion.Item contentKey={1} title=\"One\" />\n        <Accordion.Item contentKey={2} title=\"Two\" />\n      </Accordion>\n    )\n      .children()\n      .forEach((item) => {\n        const childProp = item.prop('active')\n\n        expect(childProp).to.eq(true)\n      })\n  })\n\n  it('should handle multiple active items (with an object)', () => {\n    const component = mount(\n      <Accordion active={{1: true, 2: true}}>\n        <Accordion.Item contentKey={1} title=\"One\">\n          first\n        </Accordion.Item>\n        <Accordion.Item contentKey={2} title=\"Two\">\n          second\n        </Accordion.Item>\n      </Accordion>\n    )\n\n    expect(component.text()).to.include('first')\n    expect(component.text()).to.include('second')\n  })\n})\n\ndescribe('Accordion.Stateful', () => {\n  it('should render without throwing', () => {\n    const component = mount(\n      <Accordion.Stateful>\n        <Accordion.Item contentKey={1} title=\"One\" />\n      </Accordion.Stateful>\n    )\n    const instance = component.instance()\n\n    instance.toggleActiveStatus(1)\n    instance.setExclusivelyActive(1)\n    instance.toggleActiveStatus(1)\n    instance.toggleActiveStatus(1)\n    instance.toggleActiveStatus(1)\n    instance.setExclusivelyActive(1)\n    instance.setExclusivelyActive(1)\n  })\n\n  it('can handle clicks', () => {\n    const spy = sinon.spy()\n    const component = mount(\n      <Accordion.Stateful>\n        <Accordion.Item contentKey={1} title=\"One\" onClick={spy} />\n      </Accordion.Stateful>\n    )\n    const child = component.find(Accordion.Item).instance()\n    const fakeEvent = {preventDefault: () => null}\n\n    child.props.onClick(fakeEvent)\n\n    expect(component.update().state('active')['1']).to.eq(true)\n    expect(spy.called).to.eq(true)\n  })\n})\n"]}