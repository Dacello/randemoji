'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _TimeContainer = require('./TimePicker/TimeContainer');

var _TimeContainer2 = _interopRequireDefault(_TimeContainer);

var _TimePicker = require('./TimePicker');

var _TimePicker2 = _interopRequireDefault(_TimePicker);

var _Input = require('./Input');

var _Input2 = _interopRequireDefault(_Input);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('TimePicker', function () {
  it('should render without throwing', function () {
    (0, _enzyme.shallow)(_react2.default.createElement(_TimePicker2.default, null));
  });

  it('should add className to child', function () {
    var testClassName = '__TEST__';

    var input = (0, _enzyme.shallow)(_react2.default.createElement(_TimePicker2.default, { className: testClassName })).find('.' + testClassName);

    expect(input.exists()).to.equal(true);
  });

  it('should handle external time changes', function () {
    var input = (0, _enzyme.mount)(_react2.default.createElement(_TimePicker2.default, { defaultValue: '12:00' }));

    input.setProps({ defaultValue: '12:00' });
    input.update();

    expect(input.find(_Input2.default).first().prop('defaultValue')).to.equal('12:00');
  });

  it('should handle external time changes', function () {
    var spy = _sinon2.default.spy();
    var input = (0, _enzyme.mount)(_react2.default.createElement(_TimePicker2.default, { defaultValue: '12:00', onChange: spy }));

    input.find('input').first().simulate('change', { target: { value: '12:00' } });
    input.update();

    expect(input.find(_Input2.default).first().prop('defaultValue')).to.equal('12:00');
    expect(spy.called).to.equal(true);
  });

  it('should translate clicks on ticker buttons into changes', function () {
    var spy = _sinon2.default.spy();
    var input = (0, _enzyme.mount)(_react2.default.createElement(_TimePicker2.default, { defaultValue: '12:00', isOpen: true, onChange: spy }));

    input.find('.rev-TimeTicker').find('button').first().simulate('click');

    expect(input.find(_Input2.default).first().prop('defaultValue')).to.equal('13:00');
    expect(spy.called).to.equal(true);
  });

  it('opens the time tickers on focus and hides it on blur', function () {
    var focusSpy = _sinon2.default.spy();
    var blurSpy = _sinon2.default.spy();

    var input = (0, _enzyme.mount)(_react2.default.createElement(_TimePicker2.default, { onBlur: blurSpy, onFocus: focusSpy }));

    input.find('input').first().simulate('focus');
    input.update();

    expect(input.find(_TimeContainer2.default).prop('className')).to.contain('rev-TimeContainer--open');
    expect(focusSpy.called).to.equal(true);
    expect(blurSpy.called).to.equal(false);

    input.find('input').first().simulate('blur');
    input.update();

    expect(input.find(_TimeContainer2.default).prop('className')).to.contain('rev-TimeContainer--closed');
    expect(blurSpy.called).to.equal(true);
  });

  it('keeps the calendar open when you do not have focus, but the mouse is over', function () {
    var input = (0, _enzyme.mount)(_react2.default.createElement(_TimePicker2.default, null));

    input.find('input').simulate('focus');
    input.find('label').simulate('mouseOver');
    input.find('input').simulate('blur');
    input.update();

    expect(input.find(_TimeContainer2.default).prop('className')).to.contain('rev-TimeContainer--open');

    input.find('label').simulate('mouseOut');
    input.update();
    expect(input.find(_TimeContainer2.default).prop('className')).to.contain('rev-TimeContainer--closed');
  });
});
//# sourceMappingURL=TimePicker.test.js.map