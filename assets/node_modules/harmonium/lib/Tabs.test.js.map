{"version":3,"sources":["../src/Tabs.test.js"],"names":["describe","it","inherentClassName","testClassName","childClassName","first","prop","expect","to","contain","spy","sinon","stateful","find","simulate","preventDefault","called","eq"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAEAA,SAAS,MAAT,EAAiB,YAAM;AACrBC,KAAG,gCAAH,EAAqC,YAAM;AACzC,yBACE;AAAC,oBAAD;AAAA;AACE,oCAAC,cAAD,CAAM,IAAN,IAAW,YAAY,CAAvB,EAA0B,OAAM,KAAhC;AADF,KADF;AAKD,GAND;;AAQAA,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAMC,oBAAoB,UAA1B;AACA,QAAMC,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiB,qBACrB;AAAC,oBAAD;AAAA,QAAM,WAAWD,aAAjB;AACE,oCAAC,cAAD,CAAM,IAAN,IAAW,YAAY,CAAvB,EAA0B,OAAM,KAAhC;AADF,KADqB,EAKpBE,KALoB,GAMpBC,IANoB,CAMf,WANe,CAAvB;;AAQAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCP,iBAAlC;AACAK,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GAdD;AAeD,CAxBD;;AA0BAH,SAAS,cAAT,EAAyB,YAAM;AAC7BC,KAAG,sDAAH,EAA2D,YAAM;AAC/D,uBACE;AAAC,oBAAD,CAAM,QAAN;AAAA,QAAe,eAAe,CAA9B;AACE,oCAAC,cAAD,CAAM,IAAN,IAAW,YAAY,CAAvB,EAA0B,OAAM,KAAhC,EAAsC,iBAAtC;AADF,KADF;AAKD,GAND;;AAQAA,KAAG,8DAAH,EAAmE,YAAM;AACvE,uBACE;AAAC,oBAAD,CAAM,QAAN;AAAA;AACE,oCAAC,cAAD,CAAM,IAAN,IAAW,YAAY,CAAvB,EAA0B,OAAM,KAAhC,EAAsC,iBAAtC;AADF,KADF;AAKD,GAND;;AAQAA,KAAG,0CAAH,EAA+C,YAAM;AACnD,QAAMS,MAAMC,gBAAMD,GAAN,EAAZ;AACA,QAAME,WAAW,qBACf;AAAC,oBAAD,CAAM,QAAN;AAAA,QAAe,eAAe,CAA9B;AACE;AACE,mBAAU,oBADZ;AAEE,cAAK,QAFP;AAGE,iBAASF,GAHX;AAIE,oBAAYA,GAJd;AAKE,kBAAU;AALZ;AADF,KADe,CAAjB;;AAYAE,aACGC,IADH,CACQ,qBADR,EAEGC,QAFH,CAEY,OAFZ,EAEqB,EAACC,gBAAgB,0BAAM,CAAE,CAAzB,EAFrB;;AAIAR,WAAOG,IAAIM,MAAX,EAAmBR,EAAnB,CAAsBS,EAAtB,CAAyB,IAAzB;AACD,GAnBD;AAoBD,CArCD;;AAuCAjB,SAAS,WAAT,EAAsB,YAAM;AAC1BC,KAAG,uCAAH,EAA4C,YAAM;AAChD,uBAAM,8BAAC,cAAD,CAAM,IAAN,IAAW,YAAY,CAAvB,EAA0B,OAAM,KAAhC,EAAsC,iBAAtC,GAAN;AACD,GAFD;AAGD,CAJD;;AAMAD,SAAS,YAAT,EAAuB,YAAM;AAC3BC,KAAG,+CAAH,EAAoD,YAAM;AACxD,uBAAM,8BAAC,cAAD,CAAM,IAAN,IAAW,YAAY,CAAvB,EAA0B,OAAM,KAAhC,EAAsC,YAAtC,GAAN;AACD,GAFD;;AAIAA,KAAG,iDAAH,EAAsD,YAAM;AAC1D,uBAAM,8BAAC,cAAD,CAAM,IAAN,IAAW,YAAY,CAAvB,EAA0B,OAAM,KAAhC,GAAN;AACD,GAFD;AAGD,CARD","file":"Tabs.test.js","sourcesContent":["import React from 'react'\nimport {shallow, mount} from 'enzyme'\nimport Tabs from './Tabs'\nimport sinon from 'sinon'\n\ndescribe('Tabs', () => {\n  it('should render without throwing', () => {\n    shallow(\n      <Tabs>\n        <Tabs.Item contentKey={1} title=\"One\" />\n      </Tabs>\n    )\n  })\n\n  it('should add className to child', () => {\n    const inherentClassName = 'rev-Tabs'\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(\n      <Tabs className={testClassName}>\n        <Tabs.Item contentKey={1} title=\"One\" />\n      </Tabs>\n    )\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(inherentClassName)\n    expect(childClassName).to.contain(testClassName)\n  })\n})\n\ndescribe('StatefulTabs', () => {\n  it('should render without throwing (default active case)', () => {\n    mount(\n      <Tabs.Stateful defaultActive={1}>\n        <Tabs.Item contentKey={1} title=\"One\" renderTitle />\n      </Tabs.Stateful>\n    )\n  })\n\n  it('should render without throwing (wihtout default active case)', () => {\n    mount(\n      <Tabs.Stateful>\n        <Tabs.Item contentKey={1} title=\"One\" renderTitle />\n      </Tabs.Stateful>\n    )\n  })\n\n  it('should handle clicks on child components', () => {\n    const spy = sinon.spy()\n    const stateful = shallow(\n      <Tabs.Stateful defaultActive={1}>\n        <div\n          className=\"StatefulTabExample\"\n          role=\"button\"\n          onClick={spy}\n          onKeyPress={spy}\n          tabIndex={0}\n        />\n      </Tabs.Stateful>\n    )\n\n    stateful\n      .find('.StatefulTabExample')\n      .simulate('click', {preventDefault: () => {}})\n\n    expect(spy.called).to.eq(true)\n  })\n})\n\ndescribe('Tabs.Item', () => {\n  it('can render without error (title case)', () => {\n    mount(<Tabs.Item contentKey={1} title=\"One\" renderTitle />)\n  })\n})\n\ndescribe('Tabs.Panel', () => {\n  it('can render without error (panel case, active)', () => {\n    mount(<Tabs.Item contentKey={1} title=\"One\" active />)\n  })\n\n  it('can render without error (panel case, inactive)', () => {\n    mount(<Tabs.Item contentKey={1} title=\"One\" />)\n  })\n})\n"]}