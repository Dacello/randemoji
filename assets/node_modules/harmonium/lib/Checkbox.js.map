{"version":3,"sources":["../src/Checkbox.js"],"names":["BOOL_PROPS_TO_CLASS_NAMES","stacked","stackedForSmall","stackedForMedium","BOOL_PROPS","Object","keys","Checkbox","props","error","className","label","boolClassNames","forEach","name","push","labelClassName","inputClassName","Component","propTypes","PropTypes","oneOfType","bool","string","CheckboxFieldset","options","value","defaultValue","help","onChange","readOnly","rest","isControlled","hasDefault","valueArray","defaultValueArray","valueLookup","defaultValueLookup","val","checkboxes","map","option","disabled","checked","defaultChecked","key","fieldsetClassName","array","any","func","Fieldset"],"mappings":"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","file":"Checkbox.js","sourcesContent":["import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport InputLabel from './InputLabel'\nimport CheckableFieldset from './CheckableFieldset'\n\nconst BOOL_PROPS_TO_CLASS_NAMES = {\n  stacked: ['rev-Checkbox--stacked'],\n  stackedForSmall: ['rev-Checkbox--stackedForSmall'],\n  stackedForMedium: ['rev-Checkbox--stackedForMedium'],\n}\nconst BOOL_PROPS = Object.keys(BOOL_PROPS_TO_CLASS_NAMES)\n\nexport default class Checkbox extends Component {\n  static propTypes = {\n    error: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    label: PropTypes.string,\n    className: PropTypes.string,\n  }\n\n  render() {\n    const {error, className, label, ...props} = this.props\n\n    // Start building the className\n    const boolClassNames = []\n\n    BOOL_PROPS.forEach((name) => {\n      if (props[name]) {\n        boolClassNames.push(BOOL_PROPS_TO_CLASS_NAMES[name])\n      }\n      delete props[name]\n    })\n\n    const labelClassName = classNames(\n      className,\n      'rev-Checkbox',\n      boolClassNames,\n      {\n        'is-invalid': !!error,\n      }\n    )\n\n    const inputClassName = classNames('rev-Checkbox-input', {\n      'is-invalid-input': !!error,\n      'is-invalid': !!error,\n    })\n\n    return (\n      <InputLabel className={labelClassName} error={error}>\n        <input {...props} className={inputClassName} type=\"checkbox\" />\n        <span className=\"rev-Checkbox-label\">{label}</span>\n      </InputLabel>\n    )\n  }\n}\n\nclass CheckboxFieldset extends Component {\n  static propTypes = {\n    options: PropTypes.array,\n    name: PropTypes.string,\n    value: PropTypes.any,\n    defaultValue: PropTypes.any,\n    label: PropTypes.string,\n    help: PropTypes.string,\n    error: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    onChange: PropTypes.func,\n    readOnly: PropTypes.bool,\n    className: PropTypes.string,\n  }\n\n  render() {\n    const {\n      className,\n      options,\n      name,\n      value,\n      defaultValue,\n      label,\n      help,\n      error,\n      onChange,\n      readOnly,\n      ...rest\n    } = this.props\n\n    const isControlled = !!value\n    const hasDefault = !!defaultValue\n\n    const valueArray = value || []\n    const defaultValueArray = defaultValue || []\n\n    const valueLookup = {}\n    const defaultValueLookup = {}\n\n    valueArray.forEach((val) => (valueLookup[val] = true))\n    defaultValueArray.forEach((val) => (defaultValueLookup[val] = true))\n    /* eslint complexity: [2, 4] */\n    const checkboxes = options.map((option) => {\n      const props = {\n        name,\n        error,\n        onChange,\n        readOnly,\n        label: option.label,\n        disabled: option.disabled,\n      }\n\n      if (isControlled) {\n        props.value = option.value\n        props.checked = !!valueLookup[option.value]\n      }\n      if (hasDefault) {\n        props.defaultValue = option.defaultValue\n        props.defaultChecked = !!defaultValueLookup[option.value]\n      }\n      return (\n        <Checkbox\n          key={option.key || option.value}\n          className=\"rev-CheckboxFieldset-checkbox\"\n          {...props}\n        />\n      )\n    })\n\n    const fieldsetClassName = classNames(className, 'rev-CheckboxFieldset')\n\n    return (\n      <CheckableFieldset\n        {...rest}\n        className={fieldsetClassName}\n        help={help}\n        error={error}\n        label={label}\n      >\n        {checkboxes}\n      </CheckableFieldset>\n    )\n  }\n}\n\nCheckbox.Fieldset = CheckboxFieldset\n"]}