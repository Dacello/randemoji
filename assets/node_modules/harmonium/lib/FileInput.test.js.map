{"version":3,"sources":["../src/FileInput.test.js"],"names":["describe","it","testClassName","childClassName","first","prop","expect","to","contain","spy","sinon","input","find","simulate","currentTarget","value","called","eq"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAEAA,SAAS,WAAT,EAAsB,YAAM;AAC1BC,KAAG,gCAAH,EAAqC,YAAM;AACzC,yBAAQ,8BAAC,mBAAD,OAAR;AACD,GAFD;;AAIAA,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAMC,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiB,qBAAQ,8BAAC,mBAAD,IAAW,WAAWD,aAAtB,GAAR,EACpBE,KADoB,GAEpBC,IAFoB,CAEf,WAFe,CAAvB;;AAIAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GARD;;AAUAD,KAAG,0CAAH,EAA+C,YAAM;AACnD,QAAMQ,MAAMC,gBAAMD,GAAN,EAAZ;AACA,QAAME,QAAQ,mBAAM,8BAAC,mBAAD,IAAW,UAAUF,GAArB,GAAN,CAAd;;AAEAE,UAAMC,IAAN,CAAW,OAAX,EAAoBC,QAApB,CAA6B,QAA7B,EAAuC;AACrCC,qBAAe,EAACC,OAAO,gCAAR;AADsB,KAAvC;;AAIAT,WAAOG,IAAIO,MAAX,EAAmBT,EAAnB,CAAsBU,EAAtB,CAAyB,IAAzB;AACD,GATD;;AAWAhB,KAAG,0CAAH,EAA+C,YAAM;AACnD,QAAMU,QAAQ,mBAAM,8BAAC,mBAAD,OAAN,CAAd;;AAEAA,UAAMC,IAAN,CAAW,OAAX,EAAoBC,QAApB,CAA6B,QAA7B,EAAuC;AACrCC,qBAAe,EAACC,OAAO,gCAAR;AADsB,KAAvC;AAGD,GAND;AAOD,CAjCD;;AAmCAf,SAAS,iBAAT,EAA4B,YAAM;AAChCC,KAAG,gCAAH,EAAqC,YAAM;AACzC,yBAAQ,8BAAC,mBAAD,CAAW,KAAX,OAAR;AACD,GAFD;;AAIAA,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAMC,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiB,qBACrB,8BAAC,mBAAD,CAAW,KAAX,IAAiB,WAAWD,aAA5B,GADqB,EAGpBE,KAHoB,GAIpBC,IAJoB,CAIf,WAJe,CAAvB;;AAMAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GAVD;AAWD,CAhBD","file":"FileInput.test.js","sourcesContent":["import React from 'react'\nimport {shallow, mount} from 'enzyme'\nimport FileInput from './FileInput'\nimport sinon from 'sinon'\n\ndescribe('FileInput', () => {\n  it('should render without throwing', () => {\n    shallow(<FileInput />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(<FileInput className={testClassName} />)\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(testClassName)\n  })\n\n  it('can handle changes with onChange handler', () => {\n    const spy = sinon.spy()\n    const input = mount(<FileInput onChange={spy} />)\n\n    input.find('input').simulate('change', {\n      currentTarget: {value: 'C:\\\\fakepath\\\\snack-falcon.jpg'},\n    })\n\n    expect(spy.called).to.eq(true)\n  })\n\n  it('can handle changes with onChange handler', () => {\n    const input = mount(<FileInput />)\n\n    input.find('input').simulate('change', {\n      currentTarget: {value: 'C:\\\\fakepath\\\\snack-falcon.jpg'},\n    })\n  })\n})\n\ndescribe('FileInput.Stack', () => {\n  it('should render without throwing', () => {\n    shallow(<FileInput.Stack />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(\n      <FileInput.Stack className={testClassName} />\n    )\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(testClassName)\n  })\n})\n"]}