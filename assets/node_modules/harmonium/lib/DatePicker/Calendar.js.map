{"version":3,"sources":["../../src/DatePicker/Calendar.js"],"names":["Calendar","createElement","React","nextLabel","previousLabel","dateChanger","focuser","isSelectable","props","state","date","asLuxon","selectedDate","nextProps","setState","DateTime","local","luxon","fromISO","invalid","startOf","weekday","startOfMonth","minus","Duration","fromObject","days","num","event","preventDefault","plus","month","year","className","week","overrides","day","headerDay","highlights","overlay","getCalendarRef","showYearSelection","createElementWithOverride","bind","divProps","addMonth","toLocaleString","addYear","startOfWeekOfStartOfMonth","map","i","toFormat","Component","propTypes","PropTypes","string","func","object","any","bool","node"],"mappings":"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","file":"Calendar.js","sourcesContent":["/** @jsx createElement */\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {DateTime, Duration} from 'luxon'\nimport {omit} from 'lodash'\nimport CalendarHeaderRow from './CalendarHeaderRow'\nimport CalendarWeekRow from './CalendarWeekRow'\nimport Card from '../Card'\nimport Icon from '../Icon'\nimport Button from '../Button'\n\nimport createElementWithOverride from '../Utilities/createElementWithOverride'\n\n/**\n * A component representing a Calendar for a given focus month (& including the\n * leading days of the first week and trailing days of the last week).\n */\nexport default class Calendar extends Component {\n  static propTypes = {\n    selectedDate: PropTypes.string,\n    focuser: PropTypes.func,\n    isSelectable: PropTypes.func,\n    dateChanger: PropTypes.func,\n    overrides: PropTypes.object,\n    week: PropTypes.any,\n    overlay: PropTypes.bool,\n    highlights: PropTypes.any,\n    headerDay: PropTypes.any,\n    day: PropTypes.any,\n    nextLabel: PropTypes.node,\n    previousLabel: PropTypes.node,\n    className: PropTypes.string,\n    getCalendarRef: PropTypes.func,\n    showYearSelection: PropTypes.bool,\n  }\n\n  /**\n   * The default values for props of this component\n   * @return {object} the default value object\n   */\n  static get defaultProps() {\n    const createElement = React.createElement\n\n    return {\n      nextLabel: <span>&rsaquo;</span>,\n      previousLabel: <span>&lsaquo;</span>,\n      dateChanger: () => null,\n      focuser: () => null,\n      isSelectable: () => true,\n    }\n  }\n\n  /**\n   * Creates a Calendar. Sets state.date to a Luxon DateTime based on the\n   * selectedDate prop.\n   * @param {*} props - the props\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      date: this.asLuxon(this.props.selectedDate),\n    }\n  }\n\n  /**\n   * Update state when props change. In particular, if we receive a different\n   * `selectedDate` prop from up the hierarchy, set state.date to a new Luxon\n   * DateTime appropriately (in order to force the calendar to focus on the new\n   * date).\n   * @param {*} nextProps - the next props\n   * @return {void}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.selectedDate !== this.props.selectedDate) {\n      this.setState({date: this.asLuxon(nextProps.selectedDate)})\n    }\n  }\n\n  /**\n   * Convert an iso date string to a Luxon DateTime. If iso date is blank / null,\n   * or invalid (e.g. 2018-06-66), return the local current date instead.\n   * @param {string} date - the date to convert, as either an iso date, or a\n   *   blank / null\n   * @return {DateTime} - a local DateTime\n   */\n  asLuxon(date) {\n    if (!date) {\n      return DateTime.local()\n    }\n\n    const luxon = DateTime.fromISO(date)\n\n    if (luxon.invalid) {\n      return DateTime.local()\n    }\n    return luxon\n  }\n\n  /**\n   * The start of the month of that the current focus date is in (e.g. if the\n   * input is filled with 2018-08-05 then this value is 2018-08-1).\n   * @returns {DateTime} - a Luxon DateTime represented the first day of the\n   *   month in question.\n   */\n  startOfMonth() {\n    return this.state.date.startOf('month')\n  }\n\n  /**\n   * Returns the nearest Sunday falling on or before the start of the month.\n   * This is the first day of the first row of the calendar display. Note that\n   * this date is either equal to startOfMonth (if the month starts on a Sunday)\n   * or in the previous month (if the month starts on a different day of the\n   * week).\n   * @returns {DateTime} - a Luxon DateTime representing the Sunday when the first\n   *   week of the focus month starts.\n   */\n  startOfWeekOfStartOfMonth() {\n    const weekday = this.startOfMonth().weekday % 7\n\n    return this.startOfMonth().minus(Duration.fromObject({days: weekday}))\n  }\n\n  /**\n   * Move the focus month up n months (or back |n| months if n is negative).\n   * It moves it to n months from startOfMonth to handle advancing between\n   * months with different numbers of days (2018-01-31 + 1 month in Luxon =\n   * 2018-03-03). We actually want Jan -> Feb -> Mar which only works if we do\n   * (2018-01-31).startOfMonth() + 1month = 2018-02-01.\n   *\n   * This function does not change the date in the input (only calendar display,\n   * so we can get away with using the first of the month like this.\n   * @param {int} num - the number of months to move the focus month\n   * @param {Event} event - the event that caused this handler to be invoked\n   *   (e.g. the click event from the next or previous button on the calendar)\n   * @return {void}\n   */\n  addMonth(num, event) {\n    event.preventDefault()\n    this.setState({\n      date: this.startOfMonth().plus(Duration.fromObject({month: num})),\n    })\n    if (this.props.focuser) {\n      this.props.focuser()\n    }\n  }\n\n  /**\n   * Move the focus year up n years (or back |n| years if n is negative).\n   *\n   * This function does not change the date in the input (only calendar display,\n   * so we can get away with using the first of the month like this.\n   * @param {int} num - the number of years to move the focus year\n   * @param {Event} event - the event that caused this handler to be invoked\n   *   (e.g. the click event from the next or previous button on the calendar)\n   * @return {void}\n   */\n  addYear(num, event) {\n    event.preventDefault()\n    this.setState({\n      date: this.startOfMonth().plus(Duration.fromObject({year: num})),\n    })\n    if (this.props.focuser) {\n      this.props.focuser()\n    }\n  }\n\n  render() {\n    const {\n      className,\n      week,\n      overrides,\n      day,\n      headerDay,\n      isSelectable,\n      dateChanger,\n      selectedDate,\n      highlights,\n      nextLabel,\n      previousLabel,\n      overlay,\n      getCalendarRef,\n      showYearSelection,\n      ...props\n    } = this.props\n    const createElement = createElementWithOverride.bind(this, overrides)\n    const divProps = omit(props, 'focuser')\n\n    return (\n      <div\n        {...divProps}\n        className={`rev-Calendar ${\n          overlay ? 'rev-Calendar--overlay' : ''\n        } ${className}`}\n      >\n        <Card getCalendarRef={getCalendarRef}>\n          <Card.Header className=\"rev-Calendar-header\">\n            <button\n              onClick={this.addMonth.bind(this, -1)}\n              className=\"rev-Calendar-header-button rev-Calendar-header-button--previous\"\n              aria-label=\"Previous Month\"\n            >\n              {previousLabel}\n            </button>\n            <span className=\"rev-Calendar-header-label\">\n              {this.state.date.toLocaleString({\n                month: 'short',\n                year: 'numeric',\n              })}\n            </span>\n            {showYearSelection && (\n              <div className=\"rev-Calender-year-selection\">\n                <Button\n                  small\n                  className=\"rev-Calendar-year-selection-button\"\n                  onClick={this.addYear.bind(this, 1)}\n                >\n                  <span>&#708;</span>\n                </Button>\n                <Button\n                  small\n                  className=\"rev-Calendar-year-selection-button\"\n                  onClick={this.addYear.bind(this, -1)}\n                >\n                  <span>&#709;</span>\n                </Button>\n              </div>\n            )}\n            <button\n              onClick={this.addMonth.bind(this, 1)}\n              className=\"rev-Calendar-header-button rev-Calendar-header-button--next\"\n              aria-label=\"Next Month\"\n            >\n              {nextLabel}\n            </button>\n          </Card.Header>\n          <table className=\"rev-Calendar-body\">\n            <CalendarHeaderRow\n              firstDay={this.startOfWeekOfStartOfMonth()}\n              overrides={overrides}\n              headerDay={headerDay}\n            />\n            <tbody>\n              {[0, 7, 14, 21, 28].map((i) => {\n                return (\n                  <CalendarWeekRow\n                    {...week}\n                    day={day}\n                    firstDay={this.startOfWeekOfStartOfMonth().plus({days: i})}\n                    currentMonth={this.state.date.toFormat('yyyy-MM')}\n                    isSelectable={isSelectable}\n                    dateChanger={dateChanger}\n                    selectedDate={selectedDate}\n                    highlights={highlights}\n                    key={i}\n                  />\n                )\n              })}\n            </tbody>\n          </table>\n        </Card>\n      </div>\n    )\n  }\n}\n"]}