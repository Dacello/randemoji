{"version":3,"sources":["../../src/DatePicker/CalendarDay.js"],"names":["calculateMonthClass","date","currentMonth","modifier","toFormat","calculateSelectionClass","isSelectable","selectedDate","selectable","toISODate","calculateHighlightClass","highlights","dateArg","dayClickHandler","dateChanger","event","preventDefault","CalendarDay","props","monthClass","selectionClass","highlightClass","buttonProps","toLocaleString","year","month","day","Component","propTypes","PropTypes","string","object","func","oneOfType","array","children","node"],"mappings":"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","file":"CalendarDay.js","sourcesContent":["import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {omit} from 'lodash'\nimport configMapping from '../Utilities/configMapping'\n\n/**\n * A className depending on whether the date is in the focused month or not.\n * @private\n * @param {DateTime} date - the date in question as a Luxon DateTime\n * @param {string} currentMonth the current month as a string formatted yyyy-MM\n * @returns {string} the className\n */\nfunction calculateMonthClass(date, currentMonth) {\n  const modifier =\n    date.toFormat('yyyy-MM') === currentMonth ? 'thisMonth' : 'otherMonth'\n\n  return `rev-Calendar-body-bodyCell--${modifier}`\n}\n\n/**\n * A className depending on whether the date is selectable or not.\n * @private\n * @param {Function} isSelectable - a function which returns true id the date is\n *   selectable\n * @param {DateTime} date - a Luxon DateTime for the date in question\n * @param {string} selectedDate - an iso string of the selected date\n * @return {string} - a class to use for styling\n */\n\n/* eslint complexity: [2, 4] */\nfunction calculateSelectionClass(isSelectable, date, selectedDate) {\n  const selectable = isSelectable(date)\n\n  if (!selectable) {\n    return 'rev-Calendar-body-bodyCell--unselectable'\n  } else if (selectedDate && date.toISODate() === selectedDate) {\n    return 'rev-Calendar-body-bodyCell--selected'\n  }\n  return ''\n}\n\n/**\n * A className for a date depending on whether or not it is 'highlighted.'\n * @private\n * @param {DateTime} date - the date in question as a Luxon DateTime\n * @param {object|Array|Function} highlights a mapping between dates and\n *   highlight classes. If an array, gives a standard --highlighted modifier to\n *   a found date cell.\n * @return {string} - a class to use for styling\n */\nfunction calculateHighlightClass(date, highlights) {\n  return (\n    configMapping(\n      highlights || {},\n      date,\n      (dateArg) => dateArg.toISODate(),\n      'rev-Calendar-body-bodyCell--highlighted'\n    ) || ''\n  )\n}\n\n/**\n * Handles clicks onto the cell. If the cell is selectable, invoke the\n * dateChanger that was passed in. If not, do nothing.\n * @private\n * @param {Function} isSelectable returns true if the date is selectable\n * @param {DateTime} date the date in question\n * @param {Function} dateChanger the handler to invoke if the cell is selectable\n * @return {(Function| null)} - if the cell is selectable, invoke the\n * dateChanger that was passed in. If not, do nothing\n */\nfunction dayClickHandler(isSelectable, date, dateChanger) {\n  const selectable = isSelectable(date)\n\n\n  if (selectable) {\n    return (event) => {\n      event.preventDefault()\n      dateChanger(date.toISODate())\n    }\n  }\n  return null\n}\n\n/**\n * A single day of the calendar. It is a button which takes up the entire table\n * cell. It handles click events, and date dependent formatting (e.g. selected\n * date format, unselectable date format, highlighted date format, etc).\n * @param {object} props the props of the day component\n */\nclass CalendarDay extends Component {\n  static propTypes = {\n    currentMonth: PropTypes.string,\n    date: PropTypes.object,\n    dateChanger: PropTypes.func,\n    highlights: PropTypes.oneOfType([\n      PropTypes.array,\n      PropTypes.func,\n      PropTypes.object,\n    ]),\n    isSelectable: PropTypes.func,\n    selectedDate: PropTypes.string,\n    children: PropTypes.node,\n  }\n\n  render() {\n    const {\n      currentMonth,\n      date,\n      dateChanger,\n      highlights,\n      isSelectable,\n      selectedDate,\n      ...props\n    } = this.props\n    const monthClass = calculateMonthClass(date, currentMonth)\n    const selectionClass = calculateSelectionClass(\n      isSelectable,\n      date,\n      selectedDate\n    )\n    const highlightClass = calculateHighlightClass(date, highlights)\n    const selectable = isSelectable(date)\n    const buttonProps = omit(props, 'overrides')\n\n    return (\n      <td\n        className={`rev-Calendar-body-bodyCell ${monthClass} ${selectionClass} ${highlightClass}`}\n      >\n        <button\n          {...buttonProps}\n          onClick={dayClickHandler(isSelectable, date, dateChanger)}\n          aria-label={date.toLocaleString({\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n          })}\n          disabled={!selectable}\n        >\n          {date.toLocaleString({day: 'numeric'})}\n        </button>\n      </td>\n    )\n  }\n}\n\nexport default CalendarDay\n"]}