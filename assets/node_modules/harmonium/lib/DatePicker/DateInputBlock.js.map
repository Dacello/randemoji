{"version":3,"sources":["../../src/DatePicker/DateInputBlock.js"],"names":["DateInputBlock","props","error","className","goodDateInput","generation","overrides","dateFormat","isoValue","formattedValue","name","createElement","createElementWithOverride","bind","inputClassName","Component","propTypes","PropTypes","oneOfType","bool","string","number","object"],"mappings":";;;;;;;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;+eALA;;;AAOA;;;;;;;;;;;;;IAaMA,c;;;;;;;;;;;;;AAaJ;6BACS;AAAA,mBAYH,KAAKC,KAZF;AAAA,UAELC,KAFK,UAELA,KAFK;AAAA,UAGLC,SAHK,UAGLA,SAHK;AAAA,UAILC,aAJK,UAILA,aAJK;AAAA,UAKLC,UALK,UAKLA,UALK;AAAA,UAMLC,SANK,UAMLA,SANK;AAAA,UAOLC,UAPK,UAOLA,UAPK;AAAA,UAQLC,QARK,UAQLA,QARK;AAAA,UASLC,cATK,UASLA,cATK;AAAA,UAULC,IAVK,UAULA,IAVK;AAAA,UAWFT,KAXE;;AAaP,UAAMU,gBAAgBC,oCAA0BC,IAA1B,CAA+B,IAA/B,EAAqCP,SAArC,CAAtB;AACA,UAAMQ,iBAAiB,0BAAWX,SAAX,EAAsB,sBAAtB,EAA8C;AACnE,4BAAoB,CAAC,CAACD,KAD6C;AAEnE,sBAAc,CAAC,CAACA;AAFmD,OAA9C,CAAvB;;AAKA,aACE;AAAA;AAAA;AACE,sBAAC,eAAD,eACMD,KADN;AAEE,qBAAWa,cAFb;AAGE,gBAAMV,gBAAgB,MAAhB,GAAyB,MAHjC;AAIE,gBAAMA,gBAAgBM,IAAhB,GAAuB,IAJ/B;AAKE,wBAAcD;AACd;AANF,YAOE,aAAaF,aAAaA,UAAb,GAA0B;AAPzC,WADF;AAUGH,wBAAgB,IAAhB,GACC,cAAC,eAAD;AACE,gBAAK,QADP;AAEE,gBAAMM,IAFR;AAGE,eAAQL,UAAR,eAHF;AAIE,iBAAOG,YAAY,EAJrB;AAKE;AALF;AAXJ,OADF;AAsBD;;;;EAvD0BO,gB;;AAAvBf,c,CACGgB,S,GAAY;AACjBd,SAAOe,oBAAUC,SAAV,CAAoB,CAACD,oBAAUE,IAAX,EAAiBF,oBAAUG,MAA3B,CAApB,CADU;AAEjBhB,iBAAea,oBAAUE,IAFR;AAGjBd,cAAYY,oBAAUI,MAHL;AAIjBf,aAAWW,oBAAUK,MAJJ;AAKjBf,cAAYU,oBAAUG,MALL;AAMjBZ,YAAUS,oBAAUG,MANH;AAOjBX,kBAAgBQ,oBAAUG,MAPT;AAQjBV,QAAMO,oBAAUG,MARC;AASjBjB,aAAWc,oBAAUG,MATJ,E;kBAyDNpB,c","file":"DateInputBlock.js","sourcesContent":["/** @jsx createElement */\nimport {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport Input from '../Input'\nimport createElementWithOverride from '../Utilities/createElementWithOverride'\n\n/**\n * A component which contains the input(s) for a DatePicker. If the DatePicker\n * is a true type=\"date\" input, and we aren't overriding the default format,\n * there will be one input here-- the input[type=\"date\"]. If the browser has bad\n * type=\"date\" support, or we chosen a custom date format, there will be two\n * inputs. One is a visible text input where the user types / calendar sets\n * local formatted date values (e.g. 03/12/2018). The other will be a hidden\n * input which carries the iso date value that a true date field would output.\n * Only the hidden field in this case has a name= attribute, and so it is the\n * only value submitted. This allows the server to expect the same format from\n * the client, whether date inputs are well supported on the client or not.\n * @param {object} props - the props of the DateInputBlock\n */\nclass DateInputBlock extends Component {\n  static propTypes = {\n    error: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    goodDateInput: PropTypes.bool,\n    generation: PropTypes.number,\n    overrides: PropTypes.object,\n    dateFormat: PropTypes.string,\n    isoValue: PropTypes.string,\n    formattedValue: PropTypes.string,\n    name: PropTypes.string,\n    className: PropTypes.string,\n  }\n\n  /* eslint complexity: [2, 6] */\n  render() {\n    const {\n      error,\n      className,\n      goodDateInput,\n      generation,\n      overrides,\n      dateFormat,\n      isoValue,\n      formattedValue,\n      name,\n      ...props\n    } = this.props\n    const createElement = createElementWithOverride.bind(this, overrides)\n    const inputClassName = classNames(className, 'rev-DatePicker-input', {\n      'is-invalid-input': !!error,\n      'is-invalid': !!error,\n    })\n\n    return (\n      <div>\n        <Input\n          {...props}\n          className={inputClassName}\n          type={goodDateInput ? 'date' : 'text'}\n          name={goodDateInput ? name : null}\n          defaultValue={formattedValue}\n          /*         have a placeholder to avoid empty box on Firefox  */\n          placeholder={dateFormat ? dateFormat : 'mm/dd/yyyy'}\n        />\n        {goodDateInput ? null : (\n          <Input\n            type=\"hidden\"\n            name={name}\n            key={`${generation}:trueInput`}\n            value={isoValue || ''}\n            readOnly\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default DateInputBlock\n"]}