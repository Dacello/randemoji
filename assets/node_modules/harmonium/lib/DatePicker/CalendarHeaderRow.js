'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _luxon = require('luxon');

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _createElementWithOverride = require('../Utilities/createElementWithOverride');

var _createElementWithOverride2 = _interopRequireDefault(_createElementWithOverride);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx createElement */


/**
 * A component which is the day labels at the top of the calendar e.g. S, M, T,
 * W, Th, F, S. Note that we create these letter labels in a slightly complex way
 * using Luxon, because while we don't currently support different start-of-week
 * days (we always use Sunday), we might in the future. This setup allows us to
 * do that by passing a different .firstDay prop.
 */
var CalendarHeaderRow = function (_Component) {
  _inherits(CalendarHeaderRow, _Component);

  function CalendarHeaderRow() {
    _classCallCheck(this, CalendarHeaderRow);

    return _possibleConstructorReturn(this, (CalendarHeaderRow.__proto__ || Object.getPrototypeOf(CalendarHeaderRow)).apply(this, arguments));
  }

  _createClass(CalendarHeaderRow, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          headerDay = _props.headerDay,
          overrides = _props.overrides,
          firstDay = _props.firstDay;

      var createElement = _createElementWithOverride2.default.bind(this, overrides);

      return createElement(
        'thead',
        null,
        createElement(
          'tr',
          null,
          [0, 1, 2, 3, 4, 5, 6].map(function (i) {
            return createElement(
              'th',
              _extends({}, headerDay, {
                className: 'rev-Calendar-body-headerCell',
                key: firstDay.toISO() + ':' + i
              }),
              firstDay.plus(_luxon.Duration.fromObject({ days: i })).toLocaleString({ weekday: 'narrow' })
            );
          })
        )
      );
    }
  }]);

  return CalendarHeaderRow;
}(_react.Component);

CalendarHeaderRow.propTypes = {
  overrides: _propTypes2.default.object,
  headerDay: _propTypes2.default.any,
  firstDay: _propTypes2.default.any
};
exports.default = CalendarHeaderRow;
//# sourceMappingURL=CalendarHeaderRow.js.map