{"version":3,"sources":["../../src/DatePicker/Calendar.test.js"],"names":["describe","it","calendar","monthString","DateTime","local","toLocaleString","month","year","expect","find","text","to","contain","simulate","preventDefault","startOf","plus","Duration","fromObject"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;AAEAA,SAAS,UAAT,EAAqB,YAAM;AACzBC,KAAG,gCAAH,EAAqC,YAAM;AACzC,yBAAQ,8BAAC,kBAAD,OAAR;AACD,GAFD;;AAIAA,KAAG,mBAAH,EAAwB,YAAM;AAC5B,QAAMC,WAAW,qBAAQ,8BAAC,kBAAD,OAAR,CAAjB;AACA,QAAMC,cAAcC,gBAASC,KAAT,GAAiBC,cAAjB,CAAgC;AAClDC,aAAO,OAD2C;AAElDC,YAAM;AAF4C,KAAhC,CAApB;;AAKAC,WAAOP,SAASQ,IAAT,CAAc,4BAAd,EAA4CC,IAA5C,EAAP,EAA2DC,EAA3D,CAA8DC,OAA9D,CACEV,WADF;AAGD,GAVD;;AAYAF,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAMC,WAAW,qBAAQ,8BAAC,kBAAD,IAAU,cAAa,QAAvB,GAAR,CAAjB;AACA,QAAMC,cAAcC,gBAASC,KAAT,GAAiBC,cAAjB,CAAgC;AAClDC,aAAO,OAD2C;AAElDC,YAAM;AAF4C,KAAhC,CAApB;;AAKAC,WAAOP,SAASQ,IAAT,CAAc,4BAAd,EAA4CC,IAA5C,EAAP,EAA2DC,EAA3D,CAA8DC,OAA9D,CACEV,WADF;AAGD,GAVD;;AAYAF,KAAG,8BAAH,EAAmC,YAAM;AACvC,QAAMC,WAAW,qBAAQ,8BAAC,kBAAD,OAAR,CAAjB;;AAEAA,aACGQ,IADH,CACQ,uCADR,EAEGI,QAFH,CAEY,OAFZ,EAEqB,EAACC,gBAAgB;AAAA,eAAM,IAAN;AAAA,OAAjB,EAFrB;AAGA,QAAMZ,cAAcC,gBAASC,KAAT;AAClB;AACA;AACA;AAHkB,KAIjBW,OAJiB,CAIT,OAJS,EAKjBC,IALiB,CAKZC,gBAASC,UAAT,CAAoB,EAACZ,OAAO,CAAC,CAAT,EAApB,CALY,EAMjBD,cANiB,CAMF,EAACC,OAAO,OAAR,EAAiBC,MAAM,SAAvB,EANE,CAApB;;AAQAC,WAAOP,SAASQ,IAAT,CAAc,4BAAd,EAA4CC,IAA5C,EAAP,EAA2DC,EAA3D,CAA8DC,OAA9D,CACEV,WADF;AAGD,GAjBD;;AAmBAF,KAAG,6BAAH,EAAkC,YAAM;AACtC,QAAMC,WAAW,qBAAQ,8BAAC,kBAAD,OAAR,CAAjB;;AAEAA,aACGQ,IADH,CACQ,mCADR,EAEGI,QAFH,CAEY,OAFZ,EAEqB,EAACC,gBAAgB;AAAA,eAAM,IAAN;AAAA,OAAjB,EAFrB;AAGA,QAAMZ,cAAcC,gBAASC,KAAT;AAClB;AACA;AACA;AAHkB,KAIjBW,OAJiB,CAIT,OAJS,EAKjBC,IALiB,CAKZC,gBAASC,UAAT,CAAoB,EAACZ,OAAO,CAAR,EAApB,CALY,EAMjBD,cANiB,CAMF,EAACC,OAAO,OAAR,EAAiBC,MAAM,SAAvB,EANE,CAApB;;AAQAC,WAAOP,SAASQ,IAAT,CAAc,4BAAd,EAA4CC,IAA5C,EAAP,EAA2DC,EAA3D,CAA8DC,OAA9D,CACEV,WADF;AAGD,GAjBD;AAkBD,CAlED","file":"Calendar.test.js","sourcesContent":["import React from 'react'\nimport {shallow} from 'enzyme'\nimport Calendar from './Calendar'\nimport {DateTime, Duration} from 'luxon'\n\ndescribe('Calendar', () => {\n  it('should render without throwing', () => {\n    shallow(<Calendar />)\n  })\n\n  it('defaults to today', () => {\n    const calendar = shallow(<Calendar />)\n    const monthString = DateTime.local().toLocaleString({\n      month: 'short',\n      year: 'numeric',\n    })\n\n    expect(calendar.find('.rev-Calendar-header-label').text()).to.contain(\n      monthString\n    )\n  })\n\n  it('treats invalid dates as today', () => {\n    const calendar = shallow(<Calendar selectedDate=\"-05-17\" />)\n    const monthString = DateTime.local().toLocaleString({\n      month: 'short',\n      year: 'numeric',\n    })\n\n    expect(calendar.find('.rev-Calendar-header-label').text()).to.contain(\n      monthString\n    )\n  })\n\n  it('can advance a month backward', () => {\n    const calendar = shallow(<Calendar />)\n\n    calendar\n      .find('.rev-Calendar-header-button--previous')\n      .simulate('click', {preventDefault: () => null})\n    const monthString = DateTime.local()\n      // deals with the situation when you are on 5/31 and you step back one\n      // month. Since there is no 4/31, luxon makes the date 5/1 instead. Every\n      // month has a 1st, and we only need the month part for this test\n      .startOf('month')\n      .plus(Duration.fromObject({month: -1}))\n      .toLocaleString({month: 'short', year: 'numeric'})\n\n    expect(calendar.find('.rev-Calendar-header-label').text()).to.contain(\n      monthString\n    )\n  })\n\n  it('can advance a month forward', () => {\n    const calendar = shallow(<Calendar />)\n\n    calendar\n      .find('.rev-Calendar-header-button--next')\n      .simulate('click', {preventDefault: () => null})\n    const monthString = DateTime.local()\n      // deals with the situation when you are on 3/31 and you step forward one\n      // month. Since there is no 4/31, luxon makes the date 5/1 instead. Every\n      // month has a 1st, and we only need the month part for this test\n      .startOf('month')\n      .plus(Duration.fromObject({month: 1}))\n      .toLocaleString({month: 'short', year: 'numeric'})\n\n    expect(calendar.find('.rev-Calendar-header-label').text()).to.contain(\n      monthString\n    )\n  })\n})\n"]}