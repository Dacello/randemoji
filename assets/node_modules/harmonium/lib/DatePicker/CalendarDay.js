'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _lodash = require('lodash');

var _configMapping = require('../Utilities/configMapping');

var _configMapping2 = _interopRequireDefault(_configMapping);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A className depending on whether the date is in the focused month or not.
 * @private
 * @param {DateTime} date - the date in question as a Luxon DateTime
 * @param {string} currentMonth the current month as a string formatted yyyy-MM
 * @returns {string} the className
 */
function calculateMonthClass(date, currentMonth) {
  var modifier = date.toFormat('yyyy-MM') === currentMonth ? 'thisMonth' : 'otherMonth';

  return 'rev-Calendar-body-bodyCell--' + modifier;
}

/**
 * A className depending on whether the date is selectable or not.
 * @private
 * @param {Function} isSelectable - a function which returns true id the date is
 *   selectable
 * @param {DateTime} date - a Luxon DateTime for the date in question
 * @param {string} selectedDate - an iso string of the selected date
 * @return {string} - a class to use for styling
 */

/* eslint complexity: [2, 4] */
function calculateSelectionClass(isSelectable, date, selectedDate) {
  var selectable = isSelectable(date);

  if (!selectable) {
    return 'rev-Calendar-body-bodyCell--unselectable';
  } else if (selectedDate && date.toISODate() === selectedDate) {
    return 'rev-Calendar-body-bodyCell--selected';
  }
  return '';
}

/**
 * A className for a date depending on whether or not it is 'highlighted.'
 * @private
 * @param {DateTime} date - the date in question as a Luxon DateTime
 * @param {object|Array|Function} highlights a mapping between dates and
 *   highlight classes. If an array, gives a standard --highlighted modifier to
 *   a found date cell.
 * @return {string} - a class to use for styling
 */
function calculateHighlightClass(date, highlights) {
  return (0, _configMapping2.default)(highlights || {}, date, function (dateArg) {
    return dateArg.toISODate();
  }, 'rev-Calendar-body-bodyCell--highlighted') || '';
}

/**
 * Handles clicks onto the cell. If the cell is selectable, invoke the
 * dateChanger that was passed in. If not, do nothing.
 * @private
 * @param {Function} isSelectable returns true if the date is selectable
 * @param {DateTime} date the date in question
 * @param {Function} dateChanger the handler to invoke if the cell is selectable
 * @return {(Function| null)} - if the cell is selectable, invoke the
 * dateChanger that was passed in. If not, do nothing
 */
function dayClickHandler(isSelectable, date, dateChanger) {
  var selectable = isSelectable(date);

  if (selectable) {
    return function (event) {
      event.preventDefault();
      dateChanger(date.toISODate());
    };
  }
  return null;
}

/**
 * A single day of the calendar. It is a button which takes up the entire table
 * cell. It handles click events, and date dependent formatting (e.g. selected
 * date format, unselectable date format, highlighted date format, etc).
 * @param {object} props the props of the day component
 */

var CalendarDay = function (_Component) {
  _inherits(CalendarDay, _Component);

  function CalendarDay() {
    _classCallCheck(this, CalendarDay);

    return _possibleConstructorReturn(this, (CalendarDay.__proto__ || Object.getPrototypeOf(CalendarDay)).apply(this, arguments));
  }

  _createClass(CalendarDay, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          currentMonth = _props.currentMonth,
          date = _props.date,
          dateChanger = _props.dateChanger,
          highlights = _props.highlights,
          isSelectable = _props.isSelectable,
          selectedDate = _props.selectedDate,
          props = _objectWithoutProperties(_props, ['currentMonth', 'date', 'dateChanger', 'highlights', 'isSelectable', 'selectedDate']);

      var monthClass = calculateMonthClass(date, currentMonth);
      var selectionClass = calculateSelectionClass(isSelectable, date, selectedDate);
      var highlightClass = calculateHighlightClass(date, highlights);
      var selectable = isSelectable(date);
      var buttonProps = (0, _lodash.omit)(props, 'overrides');

      return _react2.default.createElement(
        'td',
        {
          className: 'rev-Calendar-body-bodyCell ' + monthClass + ' ' + selectionClass + ' ' + highlightClass
        },
        _react2.default.createElement(
          'button',
          _extends({}, buttonProps, {
            onClick: dayClickHandler(isSelectable, date, dateChanger),
            'aria-label': date.toLocaleString({
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            }),
            disabled: !selectable
          }),
          date.toLocaleString({ day: 'numeric' })
        )
      );
    }
  }]);

  return CalendarDay;
}(_react.Component);

CalendarDay.propTypes = {
  currentMonth: _propTypes2.default.string,
  date: _propTypes2.default.object,
  dateChanger: _propTypes2.default.func,
  highlights: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.func, _propTypes2.default.object]),
  isSelectable: _propTypes2.default.func,
  selectedDate: _propTypes2.default.string,
  children: _propTypes2.default.node
};
exports.default = CalendarDay;
//# sourceMappingURL=CalendarDay.js.map