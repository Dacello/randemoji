{"version":3,"sources":["../src/ExpandingCol.js"],"names":["ExpandingColStateContainer","props","expandPane","setState","open","closePane","state","children","closer","expander","remainingProps","onClick","React","Component","propTypes","PropTypes","node","className","string","element","defaultProps","ExpandingCol","openClass","bool","Stateful","exports"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;IACaA,0B,WAAAA,0B;;;AAwBX,sCAAYC,KAAZ,EAAmB;AAAA;;AAAA,wJACXA,KADW;;AAAA,UAOnBC,UAPmB,GAON,YAAM;AACjB,YAAKC,QAAL,CAAc,EAACC,MAAM,IAAP,EAAd;AACD,KATkB;;AAAA,UAWnBC,SAXmB,GAWP,YAAM;AAChB,YAAKF,QAAL,CAAc,EAACC,MAAM,KAAP,EAAd;AACD,KAbkB;;AAEjB,UAAKE,KAAL,GAAa;AACXF,YAAM;AADK,KAAb;AAFiB;AAKlB;;;;;;AAUD;AACA;AACA;6BACS;AAAA,mBACiD,KAAKH,KADtD;AAAA,UACAM,QADA,UACAA,QADA;AAAA,UACUC,MADV,UACUA,MADV;AAAA,UACkBC,QADlB,UACkBA,QADlB;AAAA,UAC+BC,cAD/B;;AAGP,aACE;AAAC,oBAAD;AAAA;AACE,gBAAM,KAAKJ,KAAL,CAAWF,IADnB;AAEE,kBAAQ,yBAAaI,MAAb,EAAqB,EAACG,SAAS,KAAKN,SAAf,EAArB,CAFV;AAGE,oBAAU,yBAAaI,QAAb,EAAuB,EAACE,SAAS,KAAKT,UAAf,EAAvB;AAHZ,WAIMQ,cAJN;AAMGH;AANH,OADF;AAUD;;;;EAvD6CK,gBAAMC,S;;AAAzCb,0B,CACJc,S,GAAY;AACjBP,YAAUQ,oBAAUC,IADH;AAEjBC,aAAWF,oBAAUG,MAFJ;AAGjBV,UAAQO,oBAAUI,OAHD;AAIjBV,YAAUM,oBAAUI;AAJH,C;AADRnB,0B,CAQJoB,Y,GAAe;AACpB;AACA;AACAH,aAAW,EAHS;AAIpBT,UACE;AAAC,oBAAD;AAAA,MAAQ,WAAU,4EAAlB;AAAA;AAAA,GALkB;AASpBC,YACE;AAAC,oBAAD;AAAA,MAAQ,WAAU,8EAAlB;AAAA;AAAA;AAVkB,C;;IAkDHY,Y;;;;;;;;;;;6BAaV;AAAA,oBAQH,KAAKpB,KARF;AAAA,UAELM,QAFK,WAELA,QAFK;AAAA,UAGLC,MAHK,WAGLA,MAHK;AAAA,UAILC,QAJK,WAILA,QAJK;AAAA,UAKLL,IALK,WAKLA,IALK;AAAA,UAMLa,SANK,WAMLA,SANK;AAAA,UAOFP,cAPE;;AASP,UAAMY,YAAYlB,OAAO,SAAP,GAAmB,WAArC;;AAEA,aACE;AAAC,iBAAD;AAAA,qBACMM,cADN;AAEE,gDAAoCO,SAApC,SAAiDK;AAFnD;AAIGlB,eAAOI,MAAP,GAAgBC,QAJnB;AAKE;AAAA;AAAA,YAAK,WAAU,+BAAf;AAAgDF;AAAhD;AALF,OADF;AASD;;;;EAjCuCK,gBAAMC,S;;AAA3BQ,Y,CACZD,Y,GAAe;AACpBH,aAAW;AADS,C;AADHI,Y,CAKZP,S,GAAY;AACjBP,YAAUQ,oBAAUC,IADH;AAEjBC,aAAWF,oBAAUG,MAFJ;AAGjBV,UAAQO,oBAAUC,IAHD;AAIjBP,YAAUM,oBAAUC,IAJH;AAKjBZ,QAAMW,oBAAUQ;AALC,C;kBALAF,Y;;;AAoCrBA,aAAaA,YAAb,GAA4BA,YAA5B;AACAA,aAAaG,QAAb,GAAwBxB,0BAAxB;AACAqB,aAAarB,0BAAb,GAA0CA,0BAA1C;AACAyB,QAAQJ,YAAR,GAAuBA,YAAvB;AACAI,QAAQD,QAAR,GAAmBxB,0BAAnB;AACAyB,QAAQzB,0BAAR,GAAqCA,0BAArC","file":"ExpandingCol.js","sourcesContent":["import React, {cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport {Col} from './grid'\nimport Button from './Button'\n\n// An expanding column that manages its own state. This is to be used in\n// non-Redux applications where the state is not managed by another component\n// If you are using Redux, or if a different component controls whether the\n// column is open or not, use an ExpandingCol instead\nexport class ExpandingColStateContainer extends React.Component {\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    closer: PropTypes.element,\n    expander: PropTypes.element,\n  }\n\n  static defaultProps = {\n    // intentionally blank to override the 'expanderless' class of the stateless\n    // version of the component\n    className: '',\n    closer: (\n      <Button className=\"rev-ExpandingCol-closer rev-Button rev-Button--small rev-Button--secondary\">\n        -\n      </Button>\n    ),\n    expander: (\n      <Button className=\"rev-ExpandingCol-expander rev-Button rev-Button--small rev-Button--secondary\">\n        +\n      </Button>\n    ),\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      open: false,\n    }\n  }\n\n  expandPane = () => {\n    this.setState({open: true})\n  }\n\n  closePane = () => {\n    this.setState({open: false})\n  }\n\n  // Feeds open state, closer and opener down to an ExpandingCol. Note that\n  // we clone the closer and expander so that we can accept them as props\n  // from up the tree but still inject our onClick handlers for open/close\n  render() {\n    const {children, closer, expander, ...remainingProps} = this.props\n\n    return (\n      <ExpandingCol\n        open={this.state.open}\n        closer={cloneElement(closer, {onClick: this.closePane})}\n        expander={cloneElement(expander, {onClick: this.expandPane})}\n        {...remainingProps}\n      >\n        {children}\n      </ExpandingCol>\n    )\n  }\n}\n\nexport default class ExpandingCol extends React.Component {\n  static defaultProps = {\n    className: 'rev-ExpandingCol--expanderless',\n  }\n\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    closer: PropTypes.node,\n    expander: PropTypes.node,\n    open: PropTypes.bool,\n  }\n\n  render() {\n    const {\n      children,\n      closer,\n      expander,\n      open,\n      className,\n      ...remainingProps\n    } = this.props\n    const openClass = open ? 'is-open' : 'is-closed'\n\n    return (\n      <Col\n        {...remainingProps}\n        className={`rev-ExpandingCol-pane ${className} ${openClass}`}\n      >\n        {open ? closer : expander}\n        <div className=\"rev-ExpandingCol-pane-content\">{children}</div>\n      </Col>\n    )\n  }\n}\n\nExpandingCol.ExpandingCol = ExpandingCol\nExpandingCol.Stateful = ExpandingColStateContainer\nExpandingCol.ExpandingColStateContainer = ExpandingColStateContainer\nexports.ExpandingCol = ExpandingCol\nexports.Stateful = ExpandingColStateContainer\nexports.ExpandingColStateContainer = ExpandingColStateContainer\n"]}