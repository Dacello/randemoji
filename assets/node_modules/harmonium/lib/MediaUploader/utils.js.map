{"version":3,"sources":["../../src/MediaUploader/utils.js"],"names":["file","getSignedUrl","fileUrl","signedRequestUrl","makeS3Request","url","alert","uploadFileToS3","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","status","statusText","open","send","isVideoFile","type","slice","isTooBig","maxFileSize","fileSize","size","isUnsupportedFileType","supportedFileTypes"],"mappings":";;;;;;AAyBA;AACA;;qEACA,iBAA8BA,IAA9B,EAAoCC,YAApC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE8CA,aAAaD,IAAb,CAF9C;;AAAA;AAAA;AAEWE,mBAFX,SAEWA,OAFX;AAEoBC,4BAFpB,SAEoBA,gBAFpB;AAAA;AAAA,mBAGsBC,cAAcF,OAAd,EAAuBC,gBAAvB,EAAyCH,IAAzC,CAHtB;;AAAA;AAGUK,eAHV;AAAA,6CAKWA,GALX;;AAAA;AAAA;AAAA;AAAA,6CAOWC,MAAM,wBAAN,CAPX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,c;;;;;AAWf;;;AAtCA;;;;AAEA;AACA,SAASH,aAAT,CAAuBF,OAAvB,EAAgCC,gBAAhC,EAAkDH,IAAlD,EAAwD;AACtD,SAAO,IAAIQ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,MAAM,IAAIC,cAAJ,EAAZ;;AAEAD,QAAIE,kBAAJ,GAAyB,YAAM;AAC7B,UAAIF,IAAIG,UAAJ,KAAmB,CAAvB,EAA0B;AACxB,YAAIH,IAAII,MAAJ,KAAe,GAAnB,EAAwB;AACtBN,kBAAQP,OAAR;AACD,SAFD,MAEO;AACLQ,iBAAO;AACLK,oBAAQJ,IAAII,MADP;AAELC,wBAAYL,IAAIK;AAFX,WAAP;AAID;AACF;AACF,KAXD;;AAaAL,QAAIM,IAAJ,CAAS,KAAT,EAAgBd,gBAAhB;AACAQ,QAAIO,IAAJ,CAASlB,IAAT;AACD,GAlBM,CAAP;AAmBD,CAgBD,SAASmB,WAAT,CAAqBnB,IAArB,EAA2B;AACzB,MAAIA,KAAKoB,IAAL,CAAUC,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,OAA9B,EAAuC;AACrC,WAAO,IAAP;AACD;AACD,SAAO,KAAP;AACD;;AAED;AACA,SAASC,QAAT,CAAkBtB,IAAlB,EAAwBuB,WAAxB,EAAqC;AACnC,MAAMC,WAAWxB,KAAKyB,IAAL,GAAY,IAAZ,GAAmB,IAApC,CADmC,CACM;AACzC,SAAOD,WAAWD,WAAlB;AACD;;AAED;AACA,SAASG,qBAAT,CAA+B1B,IAA/B,EAAqC2B,kBAArC,EAAyD;AACvD,SAAO,CAAC,sBAASA,kBAAT,EAA6B3B,KAAKoB,IAAlC,CAAR;AACD;;kBAEc;AACbb,gCADa;AAEbY,0BAFa;AAGbG,oBAHa;AAIbI;AAJa,C","file":"utils.js","sourcesContent":["import {includes} from 'lodash'\n\n// upload to a presigned s3 url\nfunction makeS3Request(fileUrl, signedRequestUrl, file) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          resolve(fileUrl)\n        } else {\n          reject({\n            status: xhr.status,\n            statusText: xhr.statusText,\n          })\n        }\n      }\n    }\n\n    xhr.open('PUT', signedRequestUrl)\n    xhr.send(file)\n  })\n}\n\n// get the presigned url for a file\n// and call makeS3Request to upload the file\nasync function uploadFileToS3(file, getSignedUrl) {\n  try {\n    const {fileUrl, signedRequestUrl} = await getSignedUrl(file)\n    const url = await makeS3Request(fileUrl, signedRequestUrl, file)\n\n    return url\n  } catch (e) {\n    return alert('Could not upload file.')\n  }\n}\n\n// check if a file is a video\nfunction isVideoFile(file) {\n  if (file.type.slice(0, 5) === 'video') {\n    return true\n  }\n  return false\n}\n\n// check file size in bytes against a max size in MB\nfunction isTooBig(file, maxFileSize) {\n  const fileSize = file.size / 1024 / 1024 // in MB\n  return fileSize > maxFileSize\n}\n\n// check file type\nfunction isUnsupportedFileType(file, supportedFileTypes) {\n  return !includes(supportedFileTypes, file.type)\n}\n\nexport default {\n  uploadFileToS3,\n  isVideoFile,\n  isTooBig,\n  isUnsupportedFileType,\n}\n"]}