'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

// get the presigned url for a file
// and call makeS3Request to upload the file
var uploadFileToS3 = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(file, getSignedUrl) {
    var _ref2, fileUrl, signedRequestUrl, url;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return getSignedUrl(file);

          case 3:
            _ref2 = _context.sent;
            fileUrl = _ref2.fileUrl;
            signedRequestUrl = _ref2.signedRequestUrl;
            _context.next = 8;
            return makeS3Request(fileUrl, signedRequestUrl, file);

          case 8:
            url = _context.sent;
            return _context.abrupt('return', url);

          case 12:
            _context.prev = 12;
            _context.t0 = _context['catch'](0);
            return _context.abrupt('return', alert('Could not upload file.'));

          case 15:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 12]]);
  }));

  return function uploadFileToS3(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

// check if a file is a video


var _lodash = require('lodash');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// upload to a presigned s3 url
function makeS3Request(fileUrl, signedRequestUrl, file) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();

    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          resolve(fileUrl);
        } else {
          reject({
            status: xhr.status,
            statusText: xhr.statusText
          });
        }
      }
    };

    xhr.open('PUT', signedRequestUrl);
    xhr.send(file);
  });
}function isVideoFile(file) {
  if (file.type.slice(0, 5) === 'video') {
    return true;
  }
  return false;
}

// check file size in bytes against a max size in MB
function isTooBig(file, maxFileSize) {
  var fileSize = file.size / 1024 / 1024; // in MB
  return fileSize > maxFileSize;
}

// check file type
function isUnsupportedFileType(file, supportedFileTypes) {
  return !(0, _lodash.includes)(supportedFileTypes, file.type);
}

exports.default = {
  uploadFileToS3: uploadFileToS3,
  isVideoFile: isVideoFile,
  isTooBig: isTooBig,
  isUnsupportedFileType: isUnsupportedFileType
};
//# sourceMappingURL=utils.js.map