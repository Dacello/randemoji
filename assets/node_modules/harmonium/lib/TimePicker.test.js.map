{"version":3,"sources":["../src/TimePicker.test.js"],"names":["describe","it","testClassName","input","find","expect","exists","to","equal","setProps","defaultValue","update","Input","first","prop","spy","sinon","simulate","target","value","called","focusSpy","blurSpy","TimeContainer","contain"],"mappings":"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","file":"TimePicker.test.js","sourcesContent":["import React from 'react'\nimport {shallow, mount} from 'enzyme'\nimport TimeContainer from './TimePicker/TimeContainer'\nimport TimePicker from './TimePicker'\nimport Input from './Input'\nimport sinon from 'sinon'\n\ndescribe('TimePicker', () => {\n  it('should render without throwing', () => {\n    shallow(<TimePicker />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const input = shallow(<TimePicker className={testClassName} />).find(\n      `.${testClassName}`\n    )\n\n    expect(input.exists()).to.equal(true)\n  })\n\n  it('should handle external time changes', () => {\n    const input = mount(<TimePicker defaultValue=\"12:00\" />)\n\n    input.setProps({defaultValue: '12:00'})\n    input.update()\n\n    expect(\n      input\n        .find(Input)\n        .first()\n        .prop('defaultValue')\n    ).to.equal('12:00')\n  })\n\n  it('should handle external time changes', () => {\n    const spy = sinon.spy()\n    const input = mount(<TimePicker defaultValue=\"12:00\" onChange={spy} />)\n\n    input\n      .find('input')\n      .first()\n      .simulate('change', {target: {value: '12:00'}})\n    input.update()\n\n    expect(\n      input\n        .find(Input)\n        .first()\n        .prop('defaultValue')\n    ).to.equal('12:00')\n    expect(spy.called).to.equal(true)\n  })\n\n  it('should translate clicks on ticker buttons into changes', () => {\n    const spy = sinon.spy()\n    const input = mount(\n      <TimePicker defaultValue=\"12:00\" isOpen onChange={spy} />\n    )\n\n    input\n      .find('.rev-TimeTicker')\n      .find('button')\n      .first()\n      .simulate('click')\n\n    expect(\n      input\n        .find(Input)\n        .first()\n        .prop('defaultValue')\n    ).to.equal('13:00')\n    expect(spy.called).to.equal(true)\n  })\n\n  it('opens the time tickers on focus and hides it on blur', () => {\n    const focusSpy = sinon.spy()\n    const blurSpy = sinon.spy()\n\n    const input = mount(<TimePicker onBlur={blurSpy} onFocus={focusSpy} />)\n\n    input\n      .find('input')\n      .first()\n      .simulate('focus')\n    input.update()\n\n    expect(input.find(TimeContainer).prop('className')).to.contain(\n      'rev-TimeContainer--open'\n    )\n    expect(focusSpy.called).to.equal(true)\n    expect(blurSpy.called).to.equal(false)\n\n    input\n      .find('input')\n      .first()\n      .simulate('blur')\n    input.update()\n\n    expect(input.find(TimeContainer).prop('className')).to.contain(\n      'rev-TimeContainer--closed'\n    )\n    expect(blurSpy.called).to.equal(true)\n  })\n\n  it('keeps the calendar open when you do not have focus, but the mouse is over', () => {\n    const input = mount(<TimePicker />)\n\n    input.find('input').simulate('focus')\n    input.find('label').simulate('mouseOver')\n    input.find('input').simulate('blur')\n    input.update()\n\n    expect(input.find(TimeContainer).prop('className')).to.contain(\n      'rev-TimeContainer--open'\n    )\n\n    input.find('label').simulate('mouseOut')\n    input.update()\n    expect(input.find(TimeContainer).prop('className')).to.contain(\n      'rev-TimeContainer--closed'\n    )\n  })\n})\n"]}